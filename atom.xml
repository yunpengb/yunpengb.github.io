<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>物作小白</title>
  <icon>https://www.gravatar.com/avatar/29c17a41ace6b7da0bc182121e5684b7</icon>
  <subtitle>Do the same, think different</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://buildit.top/"/>
  <updated>2017-11-23T13:52:59.665Z</updated>
  <id>http://buildit.top/</id>
  
  <author>
    <name>Yunpeng</name>
    <email>byp_note@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Pyunit构建一个灵活的全自动测试平台</title>
    <link href="http://buildit.top/2017/10/20/build_platform_by_pyunit/"/>
    <id>http://buildit.top/2017/10/20/build_platform_by_pyunit/</id>
    <published>2017-10-20T03:40:00.000Z</published>
    <updated>2017-11-23T13:52:59.665Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oi16bpd89.bkt.clouddn.com/201710312150_58.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>&emsp;&emsp;主要讨论的话题：  </p><ol><li>方案背景</li><li>方案实现</li></ol><h2 id="一、方案背景"><a href="#一、方案背景" class="headerlink" title="一、方案背景"></a>一、方案背景</h2><p>掌握python脚本的编写，希望通过使用简单的框架，实现全自动化测试</p><h4 id="emsp-emsp-1-1-方案产生"><a href="#emsp-emsp-1-1-方案产生" class="headerlink" title="&emsp;&emsp;1.1 方案产生"></a>&emsp;&emsp;1.1 方案产生</h4><ul><li>产品测试的需求分析中，发现所有的测试步骤都可以通过python自动化控制。尤其是HTX工具可以使用pywin32控制，射频仪表可以通过pyvisa控制。</li><li>已经有一些通过python实现好的单个脚本的话，需要简单改写为Pyunit的格式。</li><li>使用pyunit做执行框架，使用开源的HTMLTestRunner作为测试报告生成工具</li></ul><h4 id="emsp-emsp-1-2-方案简介"><a href="#emsp-emsp-1-2-方案简介" class="headerlink" title="&emsp;&emsp; 1.2 方案简介"></a>&emsp;&emsp; 1.2 方案简介</h4><h4 id="a-什么是Pyunit"><a href="#a-什么是Pyunit" class="headerlink" title="a. 什么是Pyunit"></a>a. 什么是Pyunit</h4><ul><li>简介：Pyunit是专业单元测试框架，通过断言方法，判断测试结果。 优雅简洁，被设计用于白盒测试。但是由于它足够简单，我认为可以用它编写更复杂一点点的脚本，用于作产品测试。</li><li>背景：Pyunit是Python版本的Junit, 隶属于Xunit系列，XUnit系列里最有名的是Junit<br> Junit是一款开源框架，在业界是单元测试的标杆。</li><li>Pyunit大概出现于1999年左右，于2002年在python2.1往后的版本中被官方收录（python始于1989年，往后数第13年），成为官方集成的内建包。往后每个官方版本安装之后，直接可以import unittest。<h4 id="c-用白盒测试框架来测黑盒真的好吗"><a href="#c-用白盒测试框架来测黑盒真的好吗" class="headerlink" title="c.用白盒测试框架来测黑盒真的好吗"></a>c.用白盒测试框架来测黑盒真的好吗</h4>其实Pyunit本身是用来写白盒测试的，我也一度觉得似乎用的工具不太匹配，很low，很不专业，后来逐渐改变了这种想法。测试活动的中心目的是，管理好测试的过程和结果，至于工具，尽力而为，只要能达到测试目的的工具，就是好工具。在有余力的时候，可以继续研究和转移到更高效的测试框架上。</li></ul><h4 id="emsp-emsp-1-3-Pyunit的特点："><a href="#emsp-emsp-1-3-Pyunit的特点：" class="headerlink" title="&emsp;&emsp; 1.3 Pyunit的特点："></a>&emsp;&emsp; 1.3 Pyunit的特点：</h4><ul><li><h5 id="批量处理能力"><a href="#批量处理能力" class="headerlink" title="批量处理能力"></a>批量处理能力</h5> Pyunit像一顶机关枪，只要有足够的子弹，就可以持续射击。适合组织批量执行case。</li><li><h5 id="二元扁平结构"><a href="#二元扁平结构" class="headerlink" title="二元扁平结构"></a>二元扁平结构</h5> Pyunit使用的时候，分为两部分code:<br> 执行器部分和测试用例部分，建议两部分分开，定义好接口后，分层管理code,这样单独修改某个文件不会牵连其他code，方便code管理和维护。测试用例部分建议做总体的设计和优化，这样方便迭代和扩展用例</li></ul><ul><li><h5 id="Pyunit强在用例管理，注意做好单个脚本的架构设计和质量控制"><a href="#Pyunit强在用例管理，注意做好单个脚本的架构设计和质量控制" class="headerlink" title="Pyunit强在用例管理，注意做好单个脚本的架构设计和质量控制"></a>Pyunit强在用例管理，注意做好单个脚本的架构设计和质量控制</h5> Pyunit并不是具有魔力的万金油，   它依赖于测试用例code部分的质量，所以作为测试脚本的开发和维护者，需要做好case本身的细节管理。包测试需求量化，和测试脚本调试以及版本控制。这些都做到，就可以顺畅的跑测试，并且以后扩展case也不难了。</li><li><h5 id="成熟、高质量的单个脚本，是实现系统的关键"><a href="#成熟、高质量的单个脚本，是实现系统的关键" class="headerlink" title="成熟、高质量的单个脚本，是实现系统的关键"></a>成熟、高质量的单个脚本，<em>是实现系统的关键</em></h5>  只有大量实现好并且调试通过的单个用例，才可以使用Pyunit框架，将它们串联成一串弹夹，然后如机关枪般串联发射。  </li><li><h5 id="测试组特性"><a href="#测试组特性" class="headerlink" title="测试组特性"></a>测试组特性</h5><ul><li>Pyunit可通过定义类来实现测试用例的集合，每个类是一个测试组，每个类方法是一个case。</li><li>内个case 通过断言语句实现最终结果的判断。</li></ul></li><li><h5 id="丰富的初始化和扫尾功能"><a href="#丰富的初始化和扫尾功能" class="headerlink" title="丰富的初始化和扫尾功能"></a>丰富的初始化和扫尾功能</h5><p>  支持单个用例前后的初始化操作和扫尾操作，<br>  也支持整个测试组前后的初始化操作和扫尾操作</p></li></ul><h2 id="二、方案实现"><a href="#二、方案实现" class="headerlink" title="二、方案实现"></a>二、方案实现</h2><h3 id="2-1-一定要有详细的测试需求："><a href="#2-1-一定要有详细的测试需求：" class="headerlink" title="2.1 一定要有详细的测试需求："></a>2.1 一定要有详细的测试需求：</h3><p>&emsp;&emsp;自动化没有详细的测试需求就是扯淡，测试需求是测试的基本输入，没有之一。  </p><p>下面是一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Version: 17</div><div class="line">Author: 刘德华</div><div class="line">Create Time: 1999-01-01</div><div class="line">Update Time: 1999-08-08</div><div class="line">Setup Need: TAD-PC \ LMP \ VLAN258 \ FSV \ RF cable \ Power Switch</div><div class="line">  </div><div class="line">AHFB 5Mhz带宽，下行载波的射频性能中的ACLR指标检查</div><div class="line">1. AHFB上电</div><div class="line">2. 等待40秒，此时应该开机结束，可以ping通101.1的IP地址</div><div class="line">3. 初始化HTX，等待同步结束，等待5秒</div><div class="line">4. 建立第一路的TX载波，频率为1962.5Mhz</div><div class="line">5. 等待10秒，此时载波应该处于稳定状态</div><div class="line">6. 通过GPIB接口连接罗德施瓦茨的FSV，复位FSV</div><div class="line">7. FSV进入Lte Mode</div><div class="line">8. FSV设置当前测量频率为1962.5Mhz，带宽为5Mhz</div><div class="line">9. FSV设置使用外部参考信号，并设置频率为10Mhz信号</div><div class="line">10.FSV设置使用连续测量模式</div><div class="line">11.FSV设置外部线损</div><div class="line">12.FSV读取一次ACLR结果</div><div class="line">13.通过ssh连接，读取命令dapd -stat 0的返回结果</div><div class="line">13.删除第一路的TX载波</div><div class="line">14.以上操作中没有报错，且ACLR的值小于-45db 则为PASS，否则为FAIL</div></pre></td></tr></table></figure></p><p>通过这个例子，可以看到</p><ul><li>测试需求是一次操作的真实写照，是一个执行清单，量化而具体，不管手动还是自动执行，均可以照着操作。  </li><li>如果可能，在记录上最好再加上测试环境的信息，越丰富越好，比如依赖的硬件设备（TADX\系统模块\时钟盒子），需要几个DUT参与测试, 是否需要DUT处在特殊的状态下，等等都要注明下。</li><li>每个case都需要清晰的测试预期，也就是Pass和Fail的判断准绳，如果没有，请标注好待观察，然后将多次测试的数据收集起来，作为经验值的输入信息。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oi16bpd89.bkt.clouddn.com/201710312224_172.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="2-2-根据需求，实现用例的脚本"><a href="#2-2-根据需求，实现用例的脚本" class="headerlink" title="2.2 根据需求，实现用例的脚本"></a>2.2 根据需求，实现用例的脚本</h3><ol><li>有了上述的需求清单，再去实现单个python脚本就容易一些</li><li>新加入的测试用例需要几个有经验的同事一起review,大家多提意见，才可以集思广益，发现一些细节的疏漏，避免漏测和误测。</li></ol><h3 id="2-3-按照Pyunit的格式，集成为测试组"><a href="#2-3-按照Pyunit的格式，集成为测试组" class="headerlink" title="2.3 按照Pyunit的格式，集成为测试组"></a>2.3 按照Pyunit的格式，集成为测试组</h3><p>下面是我实现的一个基本例子，里面也有log和HTML report功能。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">from testGroup1 import *</div><div class="line">import unittest</div><div class="line">import sys</div><div class="line"></div><div class="line"></div><div class="line">def ak47():</div><div class="line">    suiteTest = unittest.TestSuite()</div><div class="line">    </div><div class="line">    suiteTest.addTest(txPerformance(&quot;tx_power_pipe1&quot;))</div><div class="line">    suiteTest.addTest(txPerformance(&quot;tx_Aclr_low_pipe1&quot;))</div><div class="line">    suiteTest.addTest(txPerformance(&quot;tx_Aclr_high_pipe1&quot;))</div><div class="line">    </div><div class="line">    return suiteTest</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    runner.run(ak47())</div></pre></td></tr></table></figure><p>测试组1的简单Demo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"></div><div class="line">import unittest</div><div class="line">from def1 import *</div><div class="line">from time import sleep</div><div class="line">import time</div><div class="line"></div><div class="line">class txPerf(unittest.TestCase):</div><div class="line"># class TxPerf(object):    </div><div class="line">    </div><div class="line">    @classmethod</div><div class="line">    def setUpClass(cls):</div><div class="line">        </div><div class="line">        cls.lloogg = None</div><div class="line">        </div><div class="line">        </div><div class="line">        # ==== log instance init ====</div><div class="line">        tim = timestamp()</div><div class="line">        </div><div class="line">        cls.lloogg = &quot;log\\&quot; + &quot;case_TxPerf_&quot;+ tim + &quot;.log&quot;</div><div class="line">        # cls.lloogg = &quot;case_TxPerf.log&quot;</div><div class="line">        </div><div class="line">        msg = &quot;~~~~~~~~~~ Case Start [%s] at %s ~~~~~~~~~~&quot; % (&quot;TX_Performance&quot;,str(tim))</div><div class="line">        logAndPrint(msg,cls.lloogg)</div><div class="line">        </div><div class="line">        # ==== powerSupply instance init and power on ====</div><div class="line">        unit_power_on()</div><div class="line">        sleep(2)</div><div class="line">        msg = &quot;~~~ unit power on step Done ~~~&quot;</div><div class="line">        logAndPrint(msg,cls.lloogg)</div><div class="line">        </div><div class="line">        # ~~~~~~~~ active 4 carrier ~~~~~~~~</div><div class="line">        for pipe in range(4):</div><div class="line">            activeTxCarr(pipe+1)</div><div class="line">            sleep(2)</div><div class="line">            </div><div class="line">            msg = &quot;============ Pipe %d Active Tx OK ============&quot; % (pipe+1)</div><div class="line">            logAndPrint(msg,cls.lloogg)</div><div class="line">        </div><div class="line">        </div><div class="line">    @classmethod</div><div class="line">    def tearDownClass(cls):</div><div class="line">        sleep(1)</div><div class="line">        attempts = 0</div><div class="line">        allrecover = False</div><div class="line">        while attempts &lt; 2 and not allrecover:</div><div class="line">            try:</div><div class="line">                killnoUseprocess()</div><div class="line">                allrecover = True</div><div class="line">            except:</div><div class="line">                print &quot;error happen in clear environment for %d time &quot; % attempts</div><div class="line">                attempts += 1</div><div class="line">                sleep(3)</div><div class="line">        </div><div class="line">        # ==== power down ====</div><div class="line">        unit_power_down()</div><div class="line">        </div><div class="line">        # ==== log time ====</div><div class="line">        tim = timestamp()</div><div class="line">        msg = &quot;~~~~~~~~~~ Case ShutDown [%s] at %s ~~~~~~~~~~&quot; % (&quot;TX_Performance&quot;,str(tim))</div><div class="line">        logAndPrint(msg,cls.lloogg)</div><div class="line"></div><div class="line">    def setUp(self):</div><div class="line">        print &quot;===case init...&quot;</div><div class="line">        sleep(1)</div><div class="line">        pass</div><div class="line"></div><div class="line">    def tearDown(self):</div><div class="line">        print &quot;===case clear...&quot;</div><div class="line">        sleep(0.3)</div><div class="line">        pass</div><div class="line">    </div><div class="line">    def tx_power_pipe1(self):</div><div class="line">        readpower = 37.2</div><div class="line">        txp = readpower</div><div class="line">        msg = &quot;AHFB Tx Power low should below 36 and 38&quot;</div><div class="line">        print msg</div><div class="line">        sleep(1)</div><div class="line">        </div><div class="line">        msg = &quot;Test Over, get tx power on pipe1 is &quot;+ str(readpower)</div><div class="line">        logAndPrint(msg,self.lloogg)</div><div class="line">        </div><div class="line">        assert 36 &lt; txp &lt; 38 , &quot;power should between 36 and 38&quot;</div><div class="line">    </div><div class="line">    def tx_Aclr_low_pipe1(self):</div><div class="line">        readAclrLow = -56</div><div class="line">        </div><div class="line">        msg = &quot;aclr low should below -45&quot;</div><div class="line">        print msg</div><div class="line">        sleep(1)</div><div class="line">        </div><div class="line">        msg = &quot;Test Over, get tx aclr low on pipe1 is &quot;+ str(readAclrLow)</div><div class="line">        logAndPrint(msg,self.lloogg)</div><div class="line">        </div><div class="line">        assert readAclrLow &lt; -45</div><div class="line"></div><div class="line">    def tx_Aclr_high_pipe1(self):</div><div class="line">        readAclrHigh = -34</div><div class="line">        </div><div class="line">        msg = &quot;aclr low should below -45&quot;</div><div class="line">        print msg</div><div class="line">        sleep(1)</div><div class="line">        </div><div class="line">        msg = &quot;Test Over, get tx aclr high on pipe1 is &quot;+ str(readAclrHigh)</div><div class="line">        logAndPrint(msg,self.lloogg)</div><div class="line">        </div><div class="line">        assert readAclrHigh &lt; -45</div><div class="line">    </div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">    unittest.main()</div></pre></td></tr></table></figure></p><h3 id="2-4-编写框架，应该注意的事情："><a href="#2-4-编写框架，应该注意的事情：" class="headerlink" title="2.4 编写框架，应该注意的事情："></a>2.4 编写框架，应该注意的事情：</h3><ul><li>建议将每个测试组，放入不同的py文件，方便code管理。</li><li>每个测试组起名字的时候，最好使用容易理解，独立的名字</li><li>在测试组的类里，需要仔细想清楚初始化和扫尾需要做的事情，避免拖沓和无意义的操作。</li><li>通过以下4个对象完成前后场景的高级功能：  <ol><li>setUpClass 这个类方法，负责测试组前的初始化动作。适合放入“所有测试case只需要干一次的事情”（比如Radio开机上电）</li><li>tearDownClass 这个类方法，负责测试组后的扫尾动作。适合放入“所有case都结束的时候执行的动作” （比如Radio下电，比如发送邮件通知测试者，测试结束）</li><li>setUp 这个成员函数，负责每个case 执行前的初始化动作。适合放入“对于每个case都需要的初始动作，建议尽量少放入动作”</li><li>tearDown 这个成员函数，负责每个case执行后的扫尾动作。适合放入“对于每个case执行完后都需要的动作，一般为清理环境的动作，尽量少放入动作”</li></ol></li></ul><h2 id="三、-其他注意事项："><a href="#三、-其他注意事项：" class="headerlink" title="三、 其他注意事项："></a>三、 其他注意事项：</h2><ul><li>在执行“执行脚本”的时候，会在终端中打印当前测试的实时状态：<ul><li>一个点表示Pass</li><li>一个大写的F表示Fail</li><li>一个大写的E表示异常，说明case非正常结束，可以在后面的报告中查看提示信息</li></ul></li><li>建议在脚本里，尽量少用Print 函数，因为所有的打印信息都会被收集到HTML报告中，会显得很臃肿而且杂乱。一个优秀的测试系统，应该把必要的信息（case是Pass还是Fail）放在测试报告里，其他的详细信息（测试的过程，步骤的record,关键位置的mark信息）全部收录到测试log中。</li><li>再次强调，这个系统依赖高质量的单个测试脚本，每个测试case应当经过几轮的验证和过滤再加入到测试系统里。否则不仅是一场不停修改错误的折磨人的循环，同时也是浪费大家的时间。对于测试活动来说，时间很重要，规则很重要。</li><li>我在pyunit_demo\box 下面放了一个 check_set1.py 作为一个后悔药的例子 ，如果单独的脚本依然有问题，还是有办法在短时间内做debug检查的，那就是将测试组改写成独立的类，然后单独的调用它，观察过程是否正常，是否会报错。</li></ul><h4 id="3-3-最后把pyunit的官方文档附上，还有中文版哦"><a href="#3-3-最后把pyunit的官方文档附上，还有中文版哦" class="headerlink" title="3.3 最后把pyunit的官方文档附上，还有中文版哦"></a>3.3 最后把pyunit的官方文档附上，还有中文版哦</h4><p>pyunit.sourceforge.net/  </p><h3 id="四、以后有时间，需要研究下，下面的高级工具"><a href="#四、以后有时间，需要研究下，下面的高级工具" class="headerlink" title="四、以后有时间，需要研究下，下面的高级工具"></a>四、以后有时间，需要研究下，下面的高级工具</h3><ul><li>测试框架 Robot framework</li><li>流行的CI外挂  Jenkins</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>将Notepad++ 配置成Python IDE</title>
    <link href="http://buildit.top/2017/09/25/config_notepad_to_pyide/"/>
    <id>http://buildit.top/2017/09/25/config_notepad_to_pyide/</id>
    <published>2017-09-25T13:42:00.000Z</published>
    <updated>2017-11-23T15:03:48.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、必要条件"><a href="#一、必要条件" class="headerlink" title="一、必要条件"></a>一、必要条件</h2><ul><li>安装好Python解释器</li><li>安装好Notepad++ ,目前建议安装X86-7.4.2 版本，X64的版本没有插件管理器，且X86-7.4.2版本以上的版本暂时也没有插件管理器。</li></ul><h2 id="二、配置nppexec插件"><a href="#二、配置nppexec插件" class="headerlink" title="二、配置nppexec插件"></a>二、配置nppexec插件</h2><ol><li><p>安装nppexec 插件<br>点击菜单里的插件–plugin manager —show piugin manager , 选择nppexec插件安装。中间可能会碰到升级plugin manager的提示。有时候会升级多次。</p></li><li><p>配置运行python的命令</p></li></ol><p>点击插件– nppexec–execute<br>在弹出的界面里，command里输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npp_save</div><div class="line">cd &quot;$(CURRENT_DIRECTORY)&quot;</div><div class="line">C:\Python27\python.exe &quot;$(FILE_NAME)&quot;</div></pre></td></tr></table></figure></p><p>将这个动作保存，名字起为py27</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oi16bpd89.bkt.clouddn.com/201709252159_444.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>然后打开高级设置</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oi16bpd89.bkt.clouddn.com/201709252201_751.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>为刚才编辑的命令集绑定一个项目run py27，上面的“Place to the Macros submenu”可勾可不勾</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oi16bpd89.bkt.clouddn.com/201709252204_120.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>然后再为这个项目绑定一个快捷键</li></ol><p>点击菜单： 运行—管理快捷键 —plugin commands ，找到Plugin commands 选项卡下的run py27,为它定义一个快捷键。<br>至此大功告成。以后每次编写程序，按下快捷键，即可在窗口直接看到运行结果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、必要条件&quot;&gt;&lt;a href=&quot;#一、必要条件&quot; class=&quot;headerlink&quot; title=&quot;一、必要条件&quot;&gt;&lt;/a&gt;一、必要条件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装好Python解释器&lt;/li&gt;
&lt;li&gt;安装好Notepad++ ,目前建议安装X86-7.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在Ubuntu上搭建一个自己的Dokuwiki</title>
    <link href="http://buildit.top/2017/09/24/install_dokuwiki_on_ubuntu/"/>
    <id>http://buildit.top/2017/09/24/install_dokuwiki_on_ubuntu/</id>
    <published>2017-09-24T03:41:00.000Z</published>
    <updated>2017-11-23T15:03:44.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h2><p>有一个wiki是很方便的，主要可以用来：  </p><ul><li>记录自己的项目活动相关信息  </li><li>记录测试需求  </li><li>记录备忘事项，方便其他人查看  </li><li>加入评论，可以形成部分电子白板的功能  </li></ul><h2 id="二、安装细节"><a href="#二、安装细节" class="headerlink" title="二、安装细节"></a>二、安装细节</h2><ol><li>首先需要有一个ubuntu主机，我选择的是16.04 64bit的桌面系统</li><li><p>在主机上安装apache2  </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install apache2</div></pre></td></tr></table></figure></li><li><p>安装php5.6  </p><p> $ sudo apt-get install python-software-properties<br> $ sudo add-apt-repository ppa:ondrej/php<br> $ sudo apt-get update<br> $ sudo apt-get -y install php5.6 php5.6-mcrypt php5.6-mbstring php5.6-curl   php5.6-cli php5.6-mysql php5.6-gd php5.6-intl php5.6-xsl php5.6-zip  </p></li></ol><p>安装结束后，查询php版本：<br>    php -v</p><ol><li><p>安装Dokuwiki  </p><p> sudo wget <a href="https://download.dokuwiki.org/out/dokuwiki-c5525093cf2c4f47e2e5d2439fe13964.tgz" target="_blank" rel="external">https://download.dokuwiki.org/out/dokuwiki-c5525093cf2c4f47e2e5d2439fe13964.tgz</a> –no-check-certificate</p></li></ol><p>下载压缩包后，解压，然后将内容放在 /var/www/html/dokuwiki/下，然后修改dokuwiki文件夹的所有者为阿帕奇，  </p><pre><code>sudo chown -R www-data:www-data /var/www/html/dokuwikisudo chmod -R 707 /var/www/html/dokuwiki</code></pre><p>浏览器输入<a href="http://localhost/dokuwiki/install.php" target="_blank" rel="external">http://localhost/dokuwiki/install.php</a> 应该可以查看到新安装的提示页面。</p><ol><li>配置Dokuwiki<br>按照上述的流程，安装完成Dokuwiki后，理论上，ubuntu上apache2 这个process的owner就是www-data:www-data, 而dokuwiki文件夹的所有者也是www-data:www-data。所有的功能都是通过浏览器实现。后台apache2会根据wiki网页自动地生成页面文件，所以不需要wiki使用者再通过linux去维护这个服务。</li></ol><h2 id="三、-使用小技巧："><a href="#三、-使用小技巧：" class="headerlink" title="三、 使用小技巧："></a>三、 使用小技巧：</h2><ul><li>在浏览器的地址上后缀加上，aaa:bbb就会自动产生一个aaa文件夹，并在aaa文件夹下自动产生bbb页面，此时点击页面上的创建此页面，然后就顺利的完成了新建页面的动作。   </li><li>dokuwiki有几款很好用的插件，插件可以通过浏览器安装，需要到插件下载页下载zip格式的插件，然后使用dokuwiki管理员页面的自定义插件选项卡上传，自动安装成功。</li><li>通过管理员的设置，可以隐藏很多按钮，让wiki的主界面简洁一些，隐藏媒体管理器，输入media即可。</li><li>dokuwiki有很强大的用户管理功能，可以设置分组，且可以设置查看权限。有效使用可以效率翻倍。</li><li>dokuwiki有很多强大的功能都是通过插件实现的，后面我再更新一个介绍插件的文章。 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、-前言&quot;&gt;&lt;a href=&quot;#一、-前言&quot; class=&quot;headerlink&quot; title=&quot;一、 前言&quot;&gt;&lt;/a&gt;一、 前言&lt;/h2&gt;&lt;p&gt;有一个wiki是很方便的，主要可以用来：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录自己的项目活动相关信息  &lt;/li&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WIN Python环境指南恢复指南</title>
    <link href="http://buildit.top/2017/09/17/recover_python/"/>
    <id>http://buildit.top/2017/09/17/recover_python/</id>
    <published>2017-09-17T04:04:00.000Z</published>
    <updated>2017-09-25T14:34:25.895Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、恢复Python开发环境的场景"><a href="#一、恢复Python开发环境的场景" class="headerlink" title="一、恢复Python开发环境的场景"></a>一、恢复Python开发环境的场景</h3><ul><li>重装系统</li><li>转移到新的工作站</li></ul><h2 id="二、需要备份的材料"><a href="#二、需要备份的材料" class="headerlink" title="二、需要备份的材料"></a>二、需要备份的材料</h2><ul><li>编辑器\IDE （这个就不多说了）</li><li>Python解释器套装（一般为Cpython）</li></ul><h2 id="三、Python解释器和依赖包的备份"><a href="#三、Python解释器和依赖包的备份" class="headerlink" title="三、Python解释器和依赖包的备份"></a>三、Python解释器和依赖包的备份</h2><ol><li>Cpython解释器就到官网下载安装即可恢复</li><li><p>对于第三方库，如果你可以上网的话，做一个你的环境的备份的方法如下</p><ol><li><p>cmd输入下面的命令</p><p>pip freeze &gt; requirements.txt</p><p>将环境下所有的第三方库重定向到requirements.txt 这个文件内，<br>在新的PC上安装完解释器后，输入<br> pip install -r requirements.txt<br>即可快速安装原来列出的第三方库</p></li></ol></li><li>如果网络没法使用，备份的方法再议，可能需要打包工具</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、恢复Python开发环境的场景&quot;&gt;&lt;a href=&quot;#一、恢复Python开发环境的场景&quot; class=&quot;headerlink&quot; title=&quot;一、恢复Python开发环境的场景&quot;&gt;&lt;/a&gt;一、恢复Python开发环境的场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;重装系统
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MicroPython 访问DHT11获得温湿度数据</title>
    <link href="http://buildit.top/2017/09/09/useMP_read_temp_from_DHT11/"/>
    <id>http://buildit.top/2017/09/09/useMP_read_temp_from_DHT11/</id>
    <published>2017-09-09T12:40:00.000Z</published>
    <updated>2017-10-21T15:03:00.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如题"><a href="#如题" class="headerlink" title="如题"></a>如题</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul><li>获取数据</li></ul><ol><li>温度</li><li>湿度</li></ol><h2 id="demo需要的硬件"><a href="#demo需要的硬件" class="headerlink" title="demo需要的硬件"></a>demo需要的硬件</h2><ul><li>ESP8266开发板*1，预计TB售价20块不到</li><li>DHT11 温湿度传感器*1，预计TB售价3块</li><li>实验用的面包板*2和面包线几根</li><li>5k 欧姆的电阻一个，（按照DHT11的手册推荐使用）</li></ul><h2 id="组装方法"><a href="#组装方法" class="headerlink" title="组装方法"></a>组装方法</h2><p>如下图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oi16bpd89.bkt.clouddn.com/201709092325_611.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>实物图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oi16bpd89.bkt.clouddn.com/201709092327_154.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里比较好理解，电源供给从8266的3.3V连接带DHT11的vcc，地线从8266的GND连接到DHT11的GND，然后在本次说明中，dht11的data线和ESP8266的D2口（GPIO4）相连，这里的5K电阻是参考了DHT11文档中推荐的连接用上的、</p><h2 id="读取温湿度的Code"><a href="#读取温湿度的Code" class="headerlink" title="读取温湿度的Code"></a>读取温湿度的Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import dht</div><div class="line">import machine</div><div class="line">from time import sleep</div><div class="line"></div><div class="line">d = dht.DHT11(machine.Pin(4))</div><div class="line">d.measure()</div><div class="line"></div><div class="line">while True:</div><div class="line">    sleep(1)</div><div class="line">    print (&quot;temp is [%s]&quot; % str(d.temperature()))</div><div class="line">    print (&quot;hum is [%s]&quot; % str(d.humidity()))</div><div class="line">    print (&quot;\r&quot;)</div><div class="line">    sleep(1)</div></pre></td></tr></table></figure><p>再次附上8266的PIN脚图</p><p><img src="http://oi16bpd89.bkt.clouddn.com/pinpin.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如题&quot;&gt;&lt;a href=&quot;#如题&quot; class=&quot;headerlink&quot; title=&quot;如题&quot;&gt;&lt;/a&gt;如题&lt;/h1&gt;&lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;ul&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Markdown 粘贴学习用</title>
    <link href="http://buildit.top/2017/08/20/markdown_demo/"/>
    <id>http://buildit.top/2017/08/20/markdown_demo/</id>
    <published>2017-08-20T13:23:35.726Z</published>
    <updated>2017-11-23T13:47:10.452Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语："><a href="#导语：" class="headerlink" title="导语："></a>导语：</h4><blockquote><p><a href="http://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="external">Markdown</a>是一种轻量级的<strong>「标记语言」</strong>，它的优点很多</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww3.sinaimg.cn/large/6aee7dbbgw1effia3l1xoj214z0n8dkl.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="一，认识Markdown"><a href="#一，认识Markdown" class="headerlink" title="一，认识Markdown"></a>一，认识Markdown</h3><p>在刚才的导语里提到，</p><ul><li><em><a href="www.google.com">创始人语法说明</a></em></li><li><em><a href="www.google.com">Markdown中文版语法说明</a></em></li></ul><h3 id="使用Markdown的优点"><a href="#使用Markdown的优点" class="headerlink" title="使用Markdown的优点"></a>使用Markdown的优点</h3><ul><li>专注你的文字内容</li><li>轻松的导出HTML</li></ul><ol><li>专注</li><li>轻松</li></ol><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table><p>代码段<br><code>hello world!</code></p><hr><h6 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h6><p><a href="http://jianshu.io/users/ea86ff9520da" target="_blank" rel="external">Te_Lee</a>,<br><a href="http://jianshu.io/p/1e402922ee32" target="_blank" rel="external">「Markdown——入门指南」</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;导语：&quot;&gt;&lt;a href=&quot;#导语：&quot; class=&quot;headerlink&quot; title=&quot;导语：&quot;&gt;&lt;/a&gt;导语：&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/Markdown&quot; targe
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MarkDown 小总结</title>
    <link href="http://buildit.top/2017/04/29/markdown_summary/"/>
    <id>http://buildit.top/2017/04/29/markdown_summary/</id>
    <published>2017-04-29T09:03:00.000Z</published>
    <updated>2017-11-23T13:47:35.300Z</updated>
    
    <content type="html"><![CDATA[<h3 id="放入文字超链接"><a href="#放入文字超链接" class="headerlink" title="放入文字超链接"></a>放入文字超链接</h3><p> [ESPyHarp](<a href="https://git/11" target="_blank" rel="external">https://git/11</a>)</p><h3 id="放入图片"><a href="#放入图片" class="headerlink" title="放入图片"></a>放入图片</h3><p>![](<a href="http://oi.com/aa.jpg" target="_blank" rel="external">http://oi.com/aa.jpg</a>)</p><h3 id="段落前空两格"><a href="#段落前空两格" class="headerlink" title="段落前空两格"></a>段落前空两格</h3><p>\&emsp;\&emsp;</p><h3 id="另起一行"><a href="#另起一行" class="headerlink" title="另起一行"></a>另起一行</h3><p>在前一行的行尾加入多过2个空格</p><h3 id="插入code"><a href="#插入code" class="headerlink" title="插入code"></a>插入code</h3><p>方法是在code的上下一行各加上三个上标点 ```     </p><h3 id="在-markdown-中显示-markdown-原文"><a href="#在-markdown-中显示-markdown-原文" class="headerlink" title="在 markdown 中显示 markdown 原文"></a>在 markdown 中显示 markdown 原文</h3><p>在特殊字符前加入\即可，即阻止转义</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;放入文字超链接&quot;&gt;&lt;a href=&quot;#放入文字超链接&quot; class=&quot;headerlink&quot; title=&quot;放入文字超链接&quot;&gt;&lt;/a&gt;放入文字超链接&lt;/h3&gt;&lt;p&gt; [ESPyHarp](&lt;a href=&quot;https://git/11&quot; target=&quot;_blan
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MicroPython ESP8266 操作指南</title>
    <link href="http://buildit.top/2017/03/20/ESP_MicroPython_Guide/"/>
    <id>http://buildit.top/2017/03/20/ESP_MicroPython_Guide/</id>
    <published>2017-03-20T07:55:00.000Z</published>
    <updated>2017-11-23T13:48:23.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="擦掉flash"><a href="#擦掉flash" class="headerlink" title="擦掉flash"></a>擦掉flash</h2><p>MicroPython的 <a href="http://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/intro.html#intro" target="_blank" rel="external">intro</a> 里1.4里有介绍。<br>另外，如果是在win os下，擦除flash的命令大概是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">esptool.py --port com3 erase_flash</div></pre></td></tr></table></figure></p><h2 id="刷入MicroPython-固件"><a href="#刷入MicroPython-固件" class="headerlink" title="刷入MicroPython 固件"></a>刷入MicroPython 固件</h2><p>下载对应ESP8266的MicroPython固件的地址在这里 <a href="http://www.micropython.org/download" target="_blank" rel="external">download</a> ，<br>你会得到类似esp8266-20170108-v1.8.7.bin 这样命名的文件。<br>刷入方法在上面的1.4节也有介绍，主要就是依靠下面这句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">esptool.py --port com3 --baud 115200 write_flash --flash_size=detect 0 esp8266-20170108-v1.8.7.bin</div></pre></td></tr></table></figure></p><p>注意，我尝试过512k专属版，似乎不好用，所以还是使用长期稳定版比较好（每夜版没有试过）。</p><h2 id="查看文件系统"><a href="#查看文件系统" class="headerlink" title="查看文件系统"></a>查看文件系统</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">uos.listdir() # 查看路径下的文件</div><div class="line">uos.listdir(&apos;dir&apos;) #查看文件夹下的文件</div><div class="line">uos.getcwd() #查看当前目录, 根目录是&apos;&apos;</div><div class="line">uos.chdir()  #改变当前目录</div></pre></td></tr></table></figure><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><p>使用打开文件的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">f = open(&apos;main.py&apos;, &apos;r&apos;)</div><div class="line">f.read()</div><div class="line">&quot;print(&apos;Welcome~&apos;)\nprint(&apos;Hello!&apos;)\n&quot;</div></pre></td></tr></table></figure></p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uos.remove(&apos;main.py&apos;)</div></pre></td></tr></table></figure><h2 id="Software-Reset"><a href="#Software-Reset" class="headerlink" title="Software Reset"></a>Software Reset</h2><p>在串口可用的时候，输入Ctrl + D 即可软复位</p><h2 id="Hardware-Reset"><a href="#Hardware-Reset" class="headerlink" title="Hardware Reset"></a>Hardware Reset</h2><p>断电时硬复位</p><h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><p> <a href="https://github.com/salesiopark/ESPyHarp" target="_blank" rel="external">ESPyHarp</a><br> 是一个可以给MP传输文件的java程序，win下使用，硬伤是无法快速便捷的中断com占用，导致使用起来不方便。<br><a href="https://github.com/micropython/webrepl/archive/master.zip" target="_blank" rel="external">webrepl client html</a><br>是一个网页形式的文件传输工具，使用起来比较方便，每次连接一般是要输入密码（根据MP的设置来）.<br>esptool<br>这个上面都有说，python 公共库里集成了，使用pip安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install esptool</div></pre></td></tr></table></figure></p><h2 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h2><p>利用http 按钮发送反馈的时候，不能使用360浏览器，它会拦截反馈信息</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.micropython.org" target="_blank" rel="external">MicroPython官网</a><br><a href="https://my.oschina.net/shaoziyang/blog/781235" target="_blank" rel="external">介绍1</a><br><a href="http://bbs.eeworld.com.cn/forum-243-1.html" target="_blank" rel="external">论坛</a><br><a href="http://blog.csdn.net/yannanxiu/article/details/53966374" target="_blank" rel="external">介绍2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;擦掉flash&quot;&gt;&lt;a href=&quot;#擦掉flash&quot; class=&quot;headerlink&quot; title=&quot;擦掉flash&quot;&gt;&lt;/a&gt;擦掉flash&lt;/h2&gt;&lt;p&gt;MicroPython的 &lt;a href=&quot;http://docs.micropython.org/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python 版的ESP控制端</title>
    <link href="http://buildit.top/2017/01/20/py_esp_server/"/>
    <id>http://buildit.top/2017/01/20/py_esp_server/</id>
    <published>2017-01-20T07:40:00.000Z</published>
    <updated>2017-08-20T12:29:43.029Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;之前用lua脚本写了一个发送html的http server放在ESP里控制电路通断很好用，<br>&emsp;&emsp;最近发现这货竟然还有专属的MicroPython 固件，作为一个pythoner,我必须要写个python版的，也方面以后加入更多的自定义功能。<br>&emsp;&emsp;所以最近花了点时间写了一个python版的ESP power control server。<br>代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> machine <span class="keyword">import</span> Pin</div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> network</div><div class="line"><span class="keyword">import</span> webrepl</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</div><div class="line"></div><div class="line">html = <span class="string">"""</span></div><div class="line">&lt;h1&gt; Power switch&lt;/h1&gt;</div><div class="line">&lt;p&gt;switch1 &lt;a href=\"?pin=ON1\"&gt;&lt;button&gt;ON&lt;/button&gt;&lt;/a&gt; &lt;a href=\"?pin=OFF1\"&gt;&lt;button&gt;OFF&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;</div><div class="line">&lt;p&gt;switch2 &lt;a href=\"?pin=ON2\"&gt;&lt;button&gt;ON&lt;/button&gt;&lt;/a&gt; &lt;a href=\"?pin=OFF2\"&gt;&lt;button&gt;OFF&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">connectwifi</span><span class="params">()</span>:</span></div><div class="line">    sta_if = network.WLAN(network.STA_IF)</div><div class="line">    sta_if.active(<span class="keyword">True</span>)</div><div class="line">    <span class="keyword">print</span> (<span class="string">"connect WIFI, please wait..."</span>)</div><div class="line">    sleep(<span class="number">4</span>)</div><div class="line">    sta_if.connect(<span class="string">"wifi-ssid"</span>,<span class="string">"wifi-password"</span>)</div><div class="line">    sleep(<span class="number">6</span>)</div><div class="line">    print(<span class="string">"WIFI connected ! IP address is ("</span>,sta_if.ifconfig()[<span class="number">0</span>],<span class="string">")"</span>)</div><div class="line">    webrepl.start()</div><div class="line">    print(<span class="string">"User init Done!"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">op1</span><span class="params">()</span>:</span></div><div class="line">    p2.value(<span class="number">0</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dn1</span><span class="params">()</span>:</span></div><div class="line">    p2.value(<span class="number">1</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">op2</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> (<span class="string">"switch 2 is open"</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dn2</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> (<span class="string">"switch 2 is down"</span>)    </div><div class="line"></div><div class="line">p2 = Pin(<span class="number">2</span>,Pin.OUT)</div><div class="line">pool = &#123;<span class="string">'ON1'</span>:op1,<span class="string">'ON2'</span>:op2,<span class="string">'OFF1'</span>:dn1,<span class="string">'OFF2'</span>:dn2&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">startServer</span><span class="params">()</span>:</span></div><div class="line">    addr = socket.getaddrinfo(<span class="string">'0.0.0.0'</span>, <span class="number">80</span>)[<span class="number">0</span>][<span class="number">-1</span>]</div><div class="line">    sleep(<span class="number">2</span>)</div><div class="line">    s = socket.socket()</div><div class="line">    sleep(<span class="number">2</span>)</div><div class="line">    s.bind(addr)</div><div class="line">    sleep(<span class="number">2</span>)</div><div class="line">    s.listen(<span class="number">1</span>)</div><div class="line">    print(<span class="string">'listening on'</span>, addr)</div><div class="line">    sleep(<span class="number">2</span>)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        cl, addr = s.accept()</div><div class="line">        cl_file = cl.makefile(<span class="string">'rwb'</span>, <span class="number">0</span>)</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                line = cl_file.readline()</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> line <span class="keyword">or</span> line == <span class="string">b'\r\n'</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                firstline = str(line).split(<span class="string">"\n"</span>)[<span class="number">0</span>]</div><div class="line">                <span class="keyword">if</span> <span class="string">"GET"</span> <span class="keyword">in</span> firstline:</div><div class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> pool.keys():</div><div class="line">                        <span class="keyword">if</span> i <span class="keyword">in</span> firstline:</div><div class="line">                            pool.get(i)()</div><div class="line">                            <span class="keyword">break</span></div><div class="line"></div><div class="line">        cl.send(html)</div><div class="line">        cl.close()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ok</span><span class="params">()</span>:</span></div><div class="line">    connectwifi()</div><div class="line">    startServer()</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    ok()</div></pre></td></tr></table></figure></p><p>将以上文件命名为ss.py 放入ESP 根目录<br>按照MicroPython 的Guide的说法来做，放入一个main.py文件作为钩子来启动它：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ss</div><div class="line">ss.ok()</div></pre></td></tr></table></figure></p><p>然后下电复位下，就可以自动连接WIFI，并建立HTTP server.外部用户通过IP地址找到它，并控制电路通断。<br>&emsp;&emsp;<br>&emsp;&emsp;已知问题</p><ul><li>使用360浏览器浏览网页无法通过按钮去控制ESP，使用IE和Chrome 可以控制。</li><li>稳定性待验证，暂未做过长时间使用测试</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;之前用lua脚本写了一个发送html的http server放在ESP里控制电路通断很好用，&lt;br&gt;&amp;emsp;&amp;emsp;最近发现这货竟然还有专属的MicroPython 固件，作为一个pythoner,我必须要写个python版的，也方面以后加入
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>每日工作划分文件夹</title>
    <link href="http://buildit.top/2016/10/09/create_daily_dir/"/>
    <id>http://buildit.top/2016/10/09/create_daily_dir/</id>
    <published>2016-10-08T18:08:00.000Z</published>
    <updated>2017-08-20T12:28:36.582Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;经常工作的时候，每天处理大量的文件很容易混乱和丢失。<br>&emsp;&emsp;我有个想法，每天的工作用到的文件都独立的放到一个文件夹里。这样整齐一些也方便管理。<br>&emsp;&emsp;于是我用python写了一个小脚本。在安装了解释器的PC里只需要双击即可执行，即可生成以当天日期为名字的文件夹。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeDIRwithDate</span><span class="params">()</span>:</span>    </div><div class="line">timestat = timestamp = time.strftime(<span class="string">'%Y-%m-%d'</span>,time.localtime(time.time())) </div><div class="line">existdir = os.path.exists(timestat)</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> existdir:</div><div class="line">os.mkdir(timestat)</div><div class="line"><span class="keyword">print</span> <span class="string">"make dir:[%s]"</span> % timestat</div><div class="line"><span class="keyword">else</span>:</div><div class="line"><span class="keyword">print</span> <span class="string">'folder[%s] already exists'</span> % timestat</div><div class="line">makeDIRwithDate()</div></pre></td></tr></table></figure><p>&emsp;&emsp;创建了文件夹后，剩下就是手工把每天用到的文件复制进去保存。效果如下图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oi16bpd89.bkt.clouddn.com/dir.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;经常工作的时候，每天处理大量的文件很容易混乱和丢失。&lt;br&gt;&amp;emsp;&amp;emsp;我有个想法，每天的工作用到的文件都独立的放到一个文件夹里。这样整齐一些也方便管理。&lt;br&gt;&amp;emsp;&amp;emsp;于是我用python写了一个小脚本。在安装了解释器的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DIY 远程控制电源模块</title>
    <link href="http://buildit.top/2016/08/15/DIY_remote_power_switch/"/>
    <id>http://buildit.top/2016/08/15/DIY_remote_power_switch/</id>
    <published>2016-08-15T15:39:00.000Z</published>
    <updated>2017-08-20T12:28:52.991Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;我们的自动化测试环境一直缺少一个可以远程控制的供电系统来控制Radio产品的开关机。之前在波兰的时候，我看到老外的自动化Lab全部采用的是商业控制产品，可使用web页面控制，也可以使用简单的协议控制（ssh或者Telnet发送简单的命令控制外部电路）。<br>&emsp;&emsp;按照老外的配置，一套控制核心+几路ABB继电器+几路空开。我查了下报价，3000欧元一个控制中心，继电器也得300RMB一个。总体下来一万多RMB。就为了自动开个机，花销挺贵的。老板也没同意，搁置了这个想法一段时间。<br>&emsp;&emsp;后来混树莓派论坛的时候，我发现有人在用ESP8266组装各种很屌的玩意，其中就包括可控电源开关，很有意思。我随后淘宝了几只，一只只要25块，很便宜的说。<br>&emsp;&emsp;以下记录的就是实现可控电源开关的过程。</p><h4 id="直接上demo图"><a href="#直接上demo图" class="headerlink" title="直接上demo图"></a>直接上demo图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oi16bpd89.bkt.clouddn.com/setup_remote_power.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>&emsp;&emsp;这个demo使用的材料有：ESP8266开发板1只+ LED灯2个 + 电阻一只 + 若干导线 + 5V继电器一枚 + 小米移动电源一个，除掉小米移动电源，花销大概是50块不到。</p><h4 id="逻辑原理是这样的："><a href="#逻辑原理是这样的：" class="headerlink" title="逻辑原理是这样的："></a>逻辑原理是这样的：</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oi16bpd89.bkt.clouddn.com/logi1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>开发板有固定的3.3V和地，以及若干3.3V的GPIO引脚</li><li>控制信号由D1 GPIO控制，图上的黄线</li><li>经过LED的链路就是受控链路，LED可以换成任何我们想要控制上下电的设备。</li><li>受控制的链路实际上有三个端口，一个固定端口，一个常开端口，一个常闭端口。我因为需要的场景是只在需要的时候关机，所以连接了常开端口。</li><li>继电器的PIN角可以设置为用低电平触发电源断开，或者用高电平触发电源断开。<h4 id="经过我的尝试"><a href="#经过我的尝试" class="headerlink" title="经过我的尝试"></a>经过我的尝试</h4></li><li>如果设置为高电平触发，当D1 GPIO端口从关变为开的时候，会从0V变为+3.3V，不足5V，无法作为“高电平”来触发继电器吸合（因为我买的这个继电器是5V驱动的）。</li><li>如果设置为低电平触发，平时D1 保持常开，需要下电的时候，把D1关闭，从+3.3V变为0V，刚好是继电器认可的“低电平”。此时会触发继电器吸合。受控链路断开。电源关闭。目的达成。（PS：后面的代码是写的电源常闭）</li></ul><p>&emsp;&emsp;这里比较凑巧的是3.3V可以给继电器供电。所以就不需要再麻烦给继电器连接额外的电源，从而可以把整个装置做的很小。<br>同时，毕竟它是一个IOT开发板，是带WIFI芯片的，可以连接路由器。<br>参考了dingzz的 <a href="http://blog.csdn.NET/dingzz/article/details/46876503" target="_blank" rel="external">http://blog.csdn.NET/dingzz/article/details/46876503</a> 文章<br>加入了一个网页特性，这里init.lua的代码如下(Lua脚本)：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">'Setting up WIFI...'</span>)</div><div class="line">wifi.setmode(wifi.STATION)</div><div class="line">wifi.sta.config(<span class="string">'WIFI_ssid'</span>, <span class="string">'wifi_password'</span>)</div><div class="line">wifi.sta.connect()</div><div class="line">tmr.alarm(<span class="number">1</span>,<span class="number">1000</span>,<span class="number">1</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span></div><div class="line"><span class="keyword">if</span> wifi.sta.getip()==<span class="keyword">nil</span> <span class="keyword">then</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"IP unavaiable,Waiting..."</span>)</div><div class="line"><span class="keyword">else</span></div><div class="line">tmr.stop(<span class="number">1</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"Config done, IP is "</span>..wifi.sta.getip())</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="keyword">end</span>)</div><div class="line">led1 = <span class="number">1</span></div><div class="line">led2 = <span class="number">2</span></div><div class="line">gpio.mode(led1, gpio.OUTPUT)</div><div class="line">gpio.mode(led2, gpio.OUTPUT)</div><div class="line">srv=net.createServer(net.TCP)</div><div class="line">srv:listen(<span class="number">80</span>,<span class="function"><span class="keyword">function</span><span class="params">(conn)</span></span></div><div class="line">    conn:on(<span class="string">"receive"</span>, <span class="function"><span class="keyword">function</span><span class="params">(client,request)</span></span></div><div class="line">        <span class="keyword">local</span> buf = <span class="string">""</span>;</div><div class="line">        <span class="keyword">local</span> _, _, method, path, vars = <span class="built_in">string</span>.find(request, <span class="string">"([A-Z]+) (.+)?(.+) HTTP"</span>);</div><div class="line">        <span class="keyword">if</span>(method == <span class="keyword">nil</span>)<span class="keyword">then</span></div><div class="line">            _, _, method, path = <span class="built_in">string</span>.find(request, <span class="string">"([A-Z]+) (.+) HTTP"</span>);</div><div class="line">        <span class="keyword">end</span></div><div class="line">        <span class="keyword">local</span> _GET = &#123;&#125;</div><div class="line">        <span class="keyword">if</span> (vars ~= <span class="keyword">nil</span>)<span class="keyword">then</span></div><div class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">string</span>.gmatch(vars, <span class="string">"(%w+)=(%w+)&amp;*"</span>) <span class="keyword">do</span></div><div class="line">                _GET[k] = v</div><div class="line">            <span class="keyword">end</span></div><div class="line">        <span class="keyword">end</span></div><div class="line">        buf = buf..<span class="string">"&lt;h1&gt; ESP 8266 server&lt;/h1&gt;"</span>;</div><div class="line">        buf = buf..<span class="string">"&lt;p&gt;switch1 &lt;a href=\"?pin=ON1\"&gt;&lt;button&gt;ON&lt;/button&gt;&lt;/a&gt; &lt;a href=\"?pin=OFF1\"&gt;&lt;button&gt;OFF&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;"</span>;</div><div class="line">        buf = buf..<span class="string">"&lt;p&gt;switch2 &lt;a href=\"?pin=ON2\"&gt;&lt;button&gt;ON&lt;/button&gt;&lt;/a&gt; &lt;a href=\"?pin=OFF2\"&gt;&lt;button&gt;OFF&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;"</span>;</div><div class="line">        <span class="keyword">local</span> _on,_off = <span class="string">""</span>,<span class="string">""</span></div><div class="line">        <span class="keyword">if</span>(_GET.pin == <span class="string">"ON1"</span>)<span class="keyword">then</span></div><div class="line">              gpio.write(led1, gpio.HIGH);</div><div class="line">        <span class="keyword">elseif</span>(_GET.pin == <span class="string">"OFF1"</span>)<span class="keyword">then</span></div><div class="line">              gpio.write(led1, gpio.LOW);</div><div class="line">        <span class="keyword">elseif</span>(_GET.pin == <span class="string">"ON2"</span>)<span class="keyword">then</span></div><div class="line">              gpio.write(led2, gpio.HIGH);</div><div class="line">        <span class="keyword">elseif</span>(_GET.pin == <span class="string">"OFF2"</span>)<span class="keyword">then</span></div><div class="line">              gpio.write(led2, gpio.LOW);</div><div class="line">        <span class="keyword">end</span></div><div class="line">        client:send(buf);</div><div class="line">        client:close();</div><div class="line">        <span class="built_in">collectgarbage</span>();</div><div class="line">    <span class="keyword">end</span>)</div><div class="line"><span class="keyword">end</span>)</div></pre></td></tr></table></figure><p>init.lua传入开发板后，每次开机都会执行它，<br>这是NodeMcu的设计。<br>这里代码实现的功能就是连接WIFI，并建立了一个网页server.<br>只要知道开发板的IP地址，就可以通过浏览器控制你想控制的电源。<br>效果是这样的：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oi16bpd89.bkt.clouddn.com/remote_web.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h4><h5 id="1-init-lua-传到ESP8266里。"><a href="#1-init-lua-传到ESP8266里。" class="headerlink" title="1.  init.lua 传到ESP8266里。"></a>1.  init.lua 传到ESP8266里。</h5><p>开机，它即可连接上指定的WIFI信号，假如PC同时连入同一个无线网，就可以简单的通过网页访问ESP8266 server。<br>然后用浏览器打开IP地址（实际上，我之前调试的时候通过串口打印已经知道了这个IP，但是如果是首次换了脚本，直接通过外部电源开机，是不知道它的IP地址的。</p><h5 id="2-测试开始："><a href="#2-测试开始：" class="headerlink" title="2. 测试开始："></a>2. 测试开始：</h5><p>插入小米电源，继电器供上了电，亮灯。<br>从串口可以看到，大概经过10秒，ESP8266自动连上WIFI，获得IP地址，在浏览器敲入这个IP地址可以进入WEB界面。<br>点击GPIO 0 ON，此时D1的高电平打开，但是LED并没有变化。<br>点击GPIO 2 OFF，此时D2变为低电平，然后应该是这个下降沿触发了继电器的输出端吸合，两端连接，形成回路。LED亮起。<br>点击GPIO 2 ON， D2变为高电平，继电器两端悬空，断开。LED灯熄灭。</p><h5 id="实验结束"><a href="#实验结束" class="headerlink" title="实验结束"></a>实验结束</h5><p>&emsp;&emsp;如果和欧洲那个商用电源开关相比，不说安全和稳定性，咱这个功能也差不多了…嘿嘿，而且很便宜。<br>&emsp;&emsp;我使用的这个继电器是松乐的5V模块，我找了我们这的电源designer给我评估下这个小装置的安全性.他认为<br>继电器本身弱电和强电是分离的，是相对成熟的技术。所以没有什么风险。<br>&emsp;&emsp;这样我可以经由WIFI控制直流27V 和交流220V的设备无压力。只要不是频繁开关（也不建议这样做），都是OK的。后来我又加装了一个20A空气开关，防止短路情况发生。算是加了一道防护。<br>&emsp;&emsp;目前这个装置总是通过IP地址来控制，不太智能，我考虑后续再改进改进，比如加入一个字符串作为标志，然后通过ARP或者什么别的方式找标志，来实现“不知道IP地址”也可以建立通信的办法。<br>埋下待续。</p><p>PS: 附上ESP 8266 原理图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oi16bpd89.bkt.clouddn.com/pinpin.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;我们的自动化测试环境一直缺少一个可以远程控制的供电系统来控制Radio产品的开关机。之前在波兰的时候，我看到老外的自动化Lab全部采用的是商业控制产品，可使用web页面控制，也可以使用简单的协议控制（ssh或者Telnet发送简单的命令控制外部电路）
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>远程控制FSV读取EVM值</title>
    <link href="http://buildit.top/2015/05/15/remote_control_FSV/"/>
    <id>http://buildit.top/2015/05/15/remote_control_FSV/</id>
    <published>2015-05-15T12:10:00.000Z</published>
    <updated>2017-11-23T13:50:13.607Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;经常要手动控制FSV测试RRH的上下行射频性能指标。重复操作太枯燥，还好查找手册发现了可以通过RJ45或者GPIB端口发送SCPI命令实现远程控制，<br>总结命令如下</p><h3 id="测试-TX-EVM"><a href="#测试-TX-EVM" class="headerlink" title="测试 TX EVM"></a>测试 TX EVM</h3><table><thead><tr><th><strong>command</strong></th><th style="text-align:center"><strong>解释</strong></th></tr></thead><tbody><tr><td>“*RST”</td><td style="text-align:center">复位</td></tr><tr><td>“INIT:CONT OFF”</td><td style="text-align:center">初始化频谱仪模式</td></tr><tr><td>“SYST:DISP:UPD ON”</td><td style="text-align:center">屏幕给出显示</td></tr><tr><td>“INST LTE”</td><td style="text-align:center">初始化LTE选件</td></tr><tr><td>“FREQ:CENT 2140 MHz”</td><td style="text-align:center">设置测试的中心频率为2140Mhz</td></tr><tr><td>“CONF:DL:BW BW5_00”</td><td style="text-align:center">设置监测5M带宽</td></tr><tr><td>“POW:AUTO2 ON”</td><td style="text-align:center">打开自动调节增益</td></tr><tr><td>“DISP:TRAC:Y:RLEV:OFFS 42”</td><td style="text-align:center">设置外部线损为42dbm</td></tr><tr><td>CALC2:FEED ‘STAT:ASUM’</td><td style="text-align:center">进入TX总结页面</td></tr><tr><td>INIT:CONT OFF</td><td style="text-align:center">设置为单次测试模式</td></tr><tr><td>INIT;*WAI</td><td style="text-align:center">进行一次测试</td></tr><tr><td>FETC:SUMM:EVM?</td><td style="text-align:center">读取刚刚测试的EVM平均值</td></tr><tr><td>FETC:SUMM:EVM:ALL:MAX?</td><td style="text-align:center">读取EVM最大值</td></tr><tr><td>FETC:SUMM:EVM:ALL:MIN?</td><td style="text-align:center">读取EVM最小值</td></tr></tbody></table><h3 id="测试-TX-ACLR"><a href="#测试-TX-ACLR" class="headerlink" title="测试 TX ACLR"></a>测试 TX ACLR</h3><table><thead><tr><th><strong>command</strong></th><th style="text-align:center"><strong>解释</strong></th></tr></thead><tbody><tr><td>“*RST”</td><td style="text-align:center">复位</td></tr><tr><td>“INIT:CONT OFF”</td><td style="text-align:center">初始化频谱仪模式</td></tr><tr><td>“SYST:DISP:UPD ON”</td><td style="text-align:center">屏幕给出显示</td></tr><tr><td>“INST LTE”</td><td style="text-align:center">初始化LTE选件</td></tr><tr><td>“FREQ:CENT “+s_Freq+”MHz”</td><td style="text-align:center">设置中心频率</td></tr><tr><td>“CONF:DL:BW BW”+s_BW</td><td style="text-align:center">设置带宽</td></tr><tr><td>“POW:AUTO2 ON”</td><td style="text-align:center">打开自动控制增益</td></tr><tr><td>“DISP:TRAC:Y:RLEV:OFFS “+s_CableLoss</td><td style="text-align:center">设置外部线损</td></tr><tr><td>“CALC2:FEED ‘SPEC:ACP’”</td><td style="text-align:center">进入ACLR界面</td></tr><tr><td>“INIT:CONT OFF”</td><td style="text-align:center">进入单次测试模式</td></tr><tr><td>“INIT;*WAI”</td><td style="text-align:center">执行一次测试</td></tr><tr><td>“CALC1:MARK:FUNC:POW:RES?”</td><td style="text-align:center">取得刚刚的测试结果</td></tr></tbody></table><h3 id="测试RX-EVM"><a href="#测试RX-EVM" class="headerlink" title="测试RX EVM"></a>测试RX EVM</h3><p>主要是设置信号发生器，发出制定的波形文件</p><table><thead><tr><th><strong>command</strong></th><th style="text-align:center"><strong>解释</strong></th></tr></thead><tbody><tr><td>“*RST”</td><td style="text-align:center">复位</td></tr><tr><td>“ROSC:SOUR EXT”</td><td style="text-align:center">使用外部时钟源</td></tr><tr><td>“ROSC:EXT:FREQ 10MHz”</td><td style="text-align:center">设置外部时钟源的频率是10Mhz</td></tr><tr><td>“ROSC:EXT:SBAN NARR”</td><td style="text-align:center">设置外部时钟源的同步要求为狭窄</td></tr><tr><td>“BB:ARB:WAV:SEL ‘“+s_wavePath+”\“+”LTE_UL_4GMax<em>PN18</em>“+s<em>BandWidth+”</em>“+s_Modulation+”‘“</td><td style="text-align:center">设置本地波形文件路径</td></tr><tr><td>“FREQ “+s_Freq+”Mhz” + “BB:ARB:TRIG:SEQ AUTO”</td><td style="text-align:center">设置发出的波形的频率</td></tr><tr><td>“BB:ARB:STAT ON”</td><td style="text-align:center">加载刚刚选择的波形</td></tr><tr><td>“POW:OFFS “+s_OffSet</td><td style="text-align:center">加入外部线损的计算</td></tr><tr><td>“:POW “+s_RfOutLev + “OUTP ON”</td><td style="text-align:center">打开外部输出</td></tr></tbody></table><p>写了个Python脚本，主要依靠telnet来发送上述命令实现控制和读取结果，代码放在<br><a href="https://github.com/yunpengb/rohde_schwarz_remote_control" target="_blank" rel="external">https://github.com/yunpengb/rohde_schwarz_remote_control</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;经常要手动控制FSV测试RRH的上下行射频性能指标。重复操作太枯燥，还好查找手册发现了可以通过RJ45或者GPIB端口发送SCPI命令实现远程控制，&lt;br&gt;总结命令如下&lt;/p&gt;
&lt;h3 id=&quot;测试-TX-EVM&quot;&gt;&lt;a href=&quot;#测试-TX-E
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python 实现在cmd里执行命令</title>
    <link href="http://buildit.top/2015/04/09/py_cmd/"/>
    <id>http://buildit.top/2015/04/09/py_cmd/</id>
    <published>2015-04-08T17:17:00.000Z</published>
    <updated>2017-08-20T12:29:31.759Z</updated>
    
    <content type="html"><![CDATA[<p>我在写脚本实现一些手动的工作自动化的过程中，有一个需求是<br>在win的cmd里输入命令，参考一些信息实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">dir = <span class="string">"FRM35.09.R01"</span></div><div class="line">cmd = [<span class="string">"C:"</span>,<span class="string">"cd C:\\Temp_a\\"</span> + dir + <span class="string">"\\C_Element\\SE_RFM\\SS_REL3\\RnD"</span>,<span class="string">"dir"</span>]</div><div class="line"></div><div class="line"><span class="comment"># execute command, and return the output</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">runCmd</span><span class="params">(cmd)</span>:</span></div><div class="line">    <span class="keyword">global</span> r</div><div class="line">    r = os.popen(cmd)</div><div class="line">    text = r.read()</div><div class="line">    <span class="keyword">return</span> text</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">closeCmd</span><span class="params">()</span>:</span></div><div class="line">    r.close()</div><div class="line"></div><div class="line"><span class="comment"># for i in range(len(cmd)):</span></div><div class="line">    <span class="comment"># result = runCmd(cmd[i])</span></div><div class="line">    <span class="comment"># print ("--&gt;Cmd send: %s" % cmd[i])</span></div><div class="line">    <span class="comment"># print ("&lt;--Cmd back: %s" % result)</span></div><div class="line"><span class="comment"># closeCmd()</span></div><div class="line"></div><div class="line">cc = cmd[<span class="number">0</span>]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(cmd)):</div><div class="line">    cc = cc + <span class="string">"&amp;&amp;"</span> + cmd[i]</div><div class="line">result = runCmd(cc)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">print</span> (<span class="string">"--&gt;Cmd send: %s"</span> % cc)</div><div class="line"><span class="keyword">print</span> (<span class="string">"&lt;--Cmd back: %s"</span> % result)</div><div class="line"></div><div class="line"><span class="comment">#pattern = r"^FRM-.*?LAR\n$"</span></div><div class="line">pattern = <span class="string">r"FRM-\w*"</span></div><div class="line">res = re.findall(pattern,result)</div><div class="line"><span class="keyword">print</span> res</div></pre></td></tr></table></figure><p>end</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我在写脚本实现一些手动的工作自动化的过程中，有一个需求是&lt;br&gt;在win的cmd里输入命令，参考一些信息实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div cl
      
    
    </summary>
    
    
  </entry>
  
</feed>
