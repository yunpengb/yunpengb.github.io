[{"title":"Markdown 粘贴学习用","date":"2017-08-20T13:23:35.726Z","path":"2017/08/20/test/","text":"导语： Markdown是一种轻量级的「标记语言」，它的优点很多 ###一，认识Markdown在刚才的导语里提到， 创始人语法说明 Markdown中文版语法说明 使用Markdown的优点 专注你的文字内容 轻松的导出HTML 专注 轻松 Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 代码段hello world! ######参考文献Te_Lee,「Markdown——入门指南」","tags":[]},{"title":"MarkDown 小总结","date":"2017-04-29T09:03:00.000Z","path":"2017/04/29/markdown_summary/","text":"###放入文字超链接 [ESPyHarp](https://git/11) ###放入图片![](http://oi.com/aa.jpg) ###段落前空两格\\&emsp;\\&emsp; ###另起一行在前一行的行尾加入多过2个空格 ###插入code方法是在code的上下一行各加上三个上标点 ``` 在 markdown 中显示 markdown 原文在特殊字符前加入\\即可，即阻止转义","tags":[]},{"title":"MicroPython ESP8266 操作指南","date":"2017-03-20T07:55:00.000Z","path":"2017/03/20/ESP_MicroPython_Guide/","text":"##擦掉flashMicroPython的 intro 里1.4里有介绍。另外，如果是在win os下，擦除flash的命令大概是1esptool.py --port com3 erase_flash ##刷入MicroPython 固件下载对应ESP8266的MicroPython固件的地址在这里 download ，你会得到类似esp8266-20170108-v1.8.7.bin 这样命名的文件。刷入方法在上面的1.4节也有介绍，主要就是依靠下面这句1esptool.py --port com3 --baud 115200 write_flash --flash_size=detect 0 esp8266-20170108-v1.8.7.bin 注意，我尝试过512k专属版，似乎不好用，所以还是使用长期稳定版比较好（每夜版没有试过）。 ##查看文件系统1234uos.listdir() # 查看路径下的文件uos.listdir(&apos;dir&apos;) #查看文件夹下的文件uos.getcwd() #查看当前目录, 根目录是&apos;&apos;uos.chdir() #改变当前目录 ##查看文件使用打开文件的方法123f = open(&apos;main.py&apos;, &apos;r&apos;)f.read()&quot;print(&apos;Welcome~&apos;)\\nprint(&apos;Hello!&apos;)\\n&quot; ##删除文件1uos.remove(&apos;main.py&apos;) ##Software Reset在串口可用的时候，输入Ctrl + D 即可软复位 ##Hardware Reset断电时硬复位 ##常用工具 ESPyHarp 是一个可以给MP传输文件的java程序，win下使用，硬伤是无法快速便捷的中断com占用，导致使用起来不方便。webrepl client html是一个网页形式的文件传输工具，使用起来比较方便，每次连接一般是要输入密码（根据MP的设置来）.esptool这个上面都有说，python 公共库里集成了，使用pip安装1pip install esptool 已知问题利用http 按钮发送反馈的时候，不能使用360浏览器，它会拦截反馈信息 参考MicroPython官网介绍1论坛介绍2","tags":[]},{"title":"python 版的ESP控制端","date":"2017-01-20T07:40:00.000Z","path":"2017/01/20/py_esp_server/","text":"&emsp;&emsp;之前用lua脚本写了一个发送html的http server放在ESP里控制电路通断很好用，&emsp;&emsp;最近发现这货竟然还有专属的MicroPython 固件，作为一个pythoner,我必须要写个python版的，也方面以后加入更多的自定义功能。&emsp;&emsp;所以最近花了点时间写了一个python版的ESP power control server。代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273# -*- coding: utf-8 -*-from machine import Pinimport socketimport networkimport webreplfrom time import sleephtml = \"\"\"&lt;h1&gt; Power switch&lt;/h1&gt;&lt;p&gt;switch1 &lt;a href=\\\"?pin=ON1\\\"&gt;&lt;button&gt;ON&lt;/button&gt;&lt;/a&gt; &lt;a href=\\\"?pin=OFF1\\\"&gt;&lt;button&gt;OFF&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;switch2 &lt;a href=\\\"?pin=ON2\\\"&gt;&lt;button&gt;ON&lt;/button&gt;&lt;/a&gt; &lt;a href=\\\"?pin=OFF2\\\"&gt;&lt;button&gt;OFF&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;\"\"\"def connectwifi(): sta_if = network.WLAN(network.STA_IF) sta_if.active(True) print (\"connect WIFI, please wait...\") sleep(4) sta_if.connect(\"wifi-ssid\",\"wifi-password\") sleep(6) print(\"WIFI connected ! IP address is (\",sta_if.ifconfig()[0],\")\") webrepl.start() print(\"User init Done!\")def op1(): p2.value(0)def dn1(): p2.value(1)def op2(): print (\"switch 2 is open\")def dn2(): print (\"switch 2 is down\") p2 = Pin(2,Pin.OUT)pool = &#123;'ON1':op1,'ON2':op2,'OFF1':dn1,'OFF2':dn2&#125;def startServer(): addr = socket.getaddrinfo('0.0.0.0', 80)[0][-1] sleep(2) s = socket.socket() sleep(2) s.bind(addr) sleep(2) s.listen(1) print('listening on', addr) sleep(2) while True: cl, addr = s.accept() cl_file = cl.makefile('rwb', 0) while True: try: line = cl_file.readline() except: continue if not line or line == b'\\r\\n': break else: firstline = str(line).split(\"\\n\")[0] if \"GET\" in firstline: for i in pool.keys(): if i in firstline: pool.get(i)() break cl.send(html) cl.close()def ok(): connectwifi() startServer()if __name__ == \"__main__\": ok() 将以上文件命名为ss.py 放入ESP 根目录按照MicroPython 的Guide的说法来做，放入一个main.py文件作为钩子来启动它：12import ssss.ok() 然后下电复位下，就可以自动连接WIFI，并建立HTTP server.外部用户通过IP地址找到它，并控制电路通断。&emsp;&emsp;&emsp;&emsp;已知问题 使用360浏览器浏览网页无法通过按钮去控制ESP，使用IE和Chrome 可以控制。 稳定性待验证，暂未做过长时间使用测试","tags":[]},{"title":"每日工作划分文件夹","date":"2016-10-08T18:08:00.000Z","path":"2016/10/09/create_daily_dir/","text":"&emsp;&emsp;经常工作的时候，每天处理大量的文件很容易混乱和丢失。&emsp;&emsp;我有个想法，每天的工作用到的文件都独立的放到一个文件夹里。这样整齐一些也方便管理。&emsp;&emsp;于是我用python写了一个小脚本。在安装了解释器的PC里只需要双击即可执行，即可生成以当天日期为名字的文件夹。 123456789101112import osimport timedef makeDIRwithDate(): timestat = timestamp = time.strftime('%Y-%m-%d',time.localtime(time.time())) existdir = os.path.exists(timestat) if not existdir: os.mkdir(timestat) print \"make dir:[%s]\" % timestat else: print 'folder[%s] already exists' % timestatmakeDIRwithDate() &emsp;&emsp;创建了文件夹后，剩下就是手工把每天用到的文件复制进去保存。效果如下图。","tags":[]},{"title":"DIY 远程控制电源模块","date":"2016-08-15T15:39:00.000Z","path":"2016/08/15/DIY_remote_power_switch/","text":"&emsp;&emsp;我们的自动化测试环境一直缺少一个可以远程控制的供电系统来控制Radio产品的开关机。之前在波兰的时候，我看到老外的自动化Lab全部采用的是商业控制产品，可使用web页面控制，也可以使用简单的协议控制（ssh或者Telnet发送简单的命令控制外部电路）。&emsp;&emsp;按照老外的配置，一套控制核心+几路ABB继电器+几路空开。我查了下报价，3000欧元一个控制中心，继电器也得300RMB一个。总体下来一万多RMB。就为了自动开个机，花销挺贵的。老板也没同意，搁置了这个想法一段时间。&emsp;&emsp;后来混树莓派论坛的时候，我发现有人在用ESP8266组装各种很屌的玩意，其中就包括可控电源开关，很有意思。我随后淘宝了几只，一只只要25块，很便宜的说。&emsp;&emsp;以下记录的就是实现可控电源开关的过程。 直接上demo图&emsp;&emsp;这个demo使用的材料有：ESP8266开发板1只+ LED灯2个 + 电阻一只 + 若干导线 + 5V继电器一枚 + 小米移动电源一个，除掉小米移动电源，花销大概是50块不到。 逻辑原理是这样的： 开发板有固定的3.3V和地，以及若干3.3V的GPIO引脚 控制信号由D1 GPIO控制，图上的黄线 经过LED的链路就是受控链路，LED可以换成任何我们想要控制上下电的设备。 受控制的链路实际上有三个端口，一个固定端口，一个常开端口，一个常闭端口。我因为需要的场景是只在需要的时候关机，所以连接了常开端口。 继电器的PIN角可以设置为用低电平触发电源断开，或者用高电平触发电源断开。经过我的尝试 如果设置为高电平触发，当D1 GPIO端口从关变为开的时候，会从0V变为+3.3V，不足5V，无法作为“高电平”来触发继电器吸合（因为我买的这个继电器是5V驱动的）。 如果设置为低电平触发，平时D1 保持常开，需要下电的时候，把D1关闭，从+3.3V变为0V，刚好是继电器认可的“低电平”。此时会触发继电器吸合。受控链路断开。电源关闭。目的达成。（PS：后面的代码是写的电源常闭） &emsp;&emsp;这里比较凑巧的是3.3V可以给继电器供电。所以就不需要再麻烦给继电器连接额外的电源，从而可以把整个装置做的很小。同时，毕竟它是一个IOT开发板，是带WIFI芯片的，可以连接路由器。参考了dingzz的 http://blog.csdn.NET/dingzz/article/details/46876503 文章加入了一个网页特性，这里init.lua的代码如下(Lua脚本)： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748print('Setting up WIFI...')wifi.setmode(wifi.STATION)wifi.sta.config('WIFI_ssid', 'wifi_password')wifi.sta.connect()tmr.alarm(1,1000,1,function()if wifi.sta.getip()==nil thenprint(\"IP unavaiable,Waiting...\")elsetmr.stop(1)print(\"Config done, IP is \"..wifi.sta.getip())endend)led1 = 1led2 = 2gpio.mode(led1, gpio.OUTPUT)gpio.mode(led2, gpio.OUTPUT)srv=net.createServer(net.TCP)srv:listen(80,function(conn) conn:on(\"receive\", function(client,request) local buf = \"\"; local _, _, method, path, vars = string.find(request, \"([A-Z]+) (.+)?(.+) HTTP\"); if(method == nil)then _, _, method, path = string.find(request, \"([A-Z]+) (.+) HTTP\"); end local _GET = &#123;&#125; if (vars ~= nil)then for k, v in string.gmatch(vars, \"(%w+)=(%w+)&amp;*\") do _GET[k] = v end end buf = buf..\"&lt;h1&gt; ESP 8266 server&lt;/h1&gt;\"; buf = buf..\"&lt;p&gt;switch1 &lt;a href=\\\"?pin=ON1\\\"&gt;&lt;button&gt;ON&lt;/button&gt;&lt;/a&gt; &lt;a href=\\\"?pin=OFF1\\\"&gt;&lt;button&gt;OFF&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;\"; buf = buf..\"&lt;p&gt;switch2 &lt;a href=\\\"?pin=ON2\\\"&gt;&lt;button&gt;ON&lt;/button&gt;&lt;/a&gt; &lt;a href=\\\"?pin=OFF2\\\"&gt;&lt;button&gt;OFF&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;\"; local _on,_off = \"\",\"\" if(_GET.pin == \"ON1\")then gpio.write(led1, gpio.HIGH); elseif(_GET.pin == \"OFF1\")then gpio.write(led1, gpio.LOW); elseif(_GET.pin == \"ON2\")then gpio.write(led2, gpio.HIGH); elseif(_GET.pin == \"OFF2\")then gpio.write(led2, gpio.LOW); end client:send(buf); client:close(); collectgarbage(); end)end) init.lua传入开发板后，每次开机都会执行它，这是NodeMcu的设计。这里代码实现的功能就是连接WIFI，并建立了一个网页server.只要知道开发板的IP地址，就可以通过浏览器控制你想控制的电源。效果是这样的： 实验过程1. init.lua 传到ESP8266里。开机，它即可连接上指定的WIFI信号，假如PC同时连入同一个无线网，就可以简单的通过网页访问ESP8266 server。然后用浏览器打开IP地址（实际上，我之前调试的时候通过串口打印已经知道了这个IP，但是如果是首次换了脚本，直接通过外部电源开机，是不知道它的IP地址的。 2. 测试开始：插入小米电源，继电器供上了电，亮灯。从串口可以看到，大概经过10秒，ESP8266自动连上WIFI，获得IP地址，在浏览器敲入这个IP地址可以进入WEB界面。点击GPIO 0 ON，此时D1的高电平打开，但是LED并没有变化。点击GPIO 2 OFF，此时D2变为低电平，然后应该是这个下降沿触发了继电器的输出端吸合，两端连接，形成回路。LED亮起。点击GPIO 2 ON， D2变为高电平，继电器两端悬空，断开。LED灯熄灭。 实验结束&emsp;&emsp;如果和欧洲那个商用电源开关相比，不说安全和稳定性，咱这个功能也差不多了…嘿嘿，而且很便宜。&emsp;&emsp;我使用的这个继电器是松乐的5V模块，我找了我们这的电源designer给我评估下这个小装置的安全性.他认为继电器本身弱电和强电是分离的，是相对成熟的技术。所以没有什么风险。&emsp;&emsp;这样我可以经由WIFI控制直流27V 和交流220V的设备无压力。只要不是频繁开关（也不建议这样做），都是OK的。后来我又加装了一个20A空气开关，防止短路情况发生。算是加了一道防护。&emsp;&emsp;目前这个装置总是通过IP地址来控制，不太智能，我考虑后续再改进改进，比如加入一个字符串作为标志，然后通过ARP或者什么别的方式找标志，来实现“不知道IP地址”也可以建立通信的办法。埋下待续。 PS: 附上ESP 8266 原理图","tags":[]},{"title":"远程控制FSV读取EVM值","date":"2015-05-15T12:10:00.000Z","path":"2015/05/15/remote_control_FSV/","text":"&emsp;&emsp;经常要手动控制FSV测试RRH的上下行射频性能指标。重复操作太枯燥，还好查找手册发现了可以通过RJ45或者GPIB端口发送SCPI命令实现远程控制，总结命令如下 测试 TX EVM command 解释 “*RST” 复位 “INIT:CONT OFF” 初始化频谱仪模式 “SYST:DISP:UPD ON” 屏幕给出显示 “INST LTE” 初始化LTE选件 “FREQ:CENT 2140 MHz” 设置测试的中心频率为2140Mhz “CONF:DL:BW BW5_00” 设置监测5M带宽 “POW:AUTO2 ON” 打开自动调节增益 “DISP:TRAC:Y:RLEV:OFFS 42” 设置外部线损为42dbm CALC2:FEED ‘STAT:ASUM’ 进入TX总结页面 INIT:CONT OFF 设置为单次测试模式 INIT;*WAI 进行一次测试 FETC:SUMM:EVM? 读取刚刚测试的EVM平均值 FETC:SUMM:EVM:ALL:MAX? 读取EVM最大值 FETC:SUMM:EVM:ALL:MIN? 读取EVM最小值 测试 TX ACLR command 解释 “*RST” 复位 “INIT:CONT OFF” 初始化频谱仪模式 “SYST:DISP:UPD ON” 屏幕给出显示 “INST LTE” 初始化LTE选件 “FREQ:CENT “+s_Freq+”MHz” 设置中心频率 “CONF:DL:BW BW”+s_BW 设置带宽 “POW:AUTO2 ON” 打开自动控制增益 “DISP:TRAC:Y:RLEV:OFFS “+s_CableLoss 设置外部线损 “CALC2:FEED ‘SPEC:ACP’” 进入ACLR界面 “INIT:CONT OFF” 进入单次测试模式 “INIT;*WAI” 执行一次测试 “CALC1:MARK:FUNC:POW:RES?” 取得刚刚的测试结果 ###测试RX EVM主要是设置信号发生器，发出制定的波形文件 command 解释 “*RST” 复位 “ROSC:SOUR EXT” 使用外部时钟源 “ROSC:EXT:FREQ 10MHz” 设置外部时钟源的频率是10Mhz “ROSC:EXT:SBAN NARR” 设置外部时钟源的同步要求为狭窄 “BB:ARB:WAV:SEL ‘“+s_wavePath+”\\“+”LTE_UL_4GMaxPN18“+sBandWidth+”“+s_Modulation+”‘“ 设置本地波形文件路径 “FREQ “+s_Freq+”Mhz” + “BB:ARB:TRIG:SEQ AUTO” 设置发出的波形的频率 “BB:ARB:STAT ON” 加载刚刚选择的波形 “POW:OFFS “+s_OffSet 加入外部线损的计算 “:POW “+s_RfOutLev + “OUTP ON” 打开外部输出 写了个Python脚本，主要依靠telnet来发送上述命令实现控制和读取结果，代码放在https://github.com/yunpengb/rohde_schwarz_remote_control","tags":[]},{"title":"python 实现在cmd里执行命令","date":"2015-04-08T17:17:00.000Z","path":"2015/04/09/py_cmd/","text":"我在写脚本实现一些手动的工作自动化的过程中，有一个需求是在win的cmd里输入命令，参考一些信息实现如下： 1234567891011121314151617181920212223242526272829303132333435import osimport redir = \"FRM35.09.R01\"cmd = [\"C:\",\"cd C:\\\\Temp_a\\\\\" + dir + \"\\\\C_Element\\\\SE_RFM\\\\SS_REL3\\\\RnD\",\"dir\"]# execute command, and return the outputdef runCmd(cmd): global r r = os.popen(cmd) text = r.read() return textdef closeCmd(): r.close()# for i in range(len(cmd)): # result = runCmd(cmd[i]) # print (\"--&gt;Cmd send: %s\" % cmd[i]) # print (\"&lt;--Cmd back: %s\" % result)# closeCmd()cc = cmd[0]for i in range(1,len(cmd)): cc = cc + \"&amp;&amp;\" + cmd[i]result = runCmd(cc)print (\"--&gt;Cmd send: %s\" % cc)print (\"&lt;--Cmd back: %s\" % result)#pattern = r\"^FRM-.*?LAR\\n$\"pattern = r\"FRM-\\w*\"res = re.findall(pattern,result)print res end","tags":[]}]