<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[python 实现在cmd里执行命令]]></title>
      <url>%2F2016%2F12%2F16%2F2016-12-16%2F</url>
      <content type="text"><![CDATA[我在写脚本实现一些手动的工作自动化的过程中，有一个需求是在win的cmd里输入命令，参考一些信息实现如下： import os import re dir = &quot;FRM35.09.R01&quot; cmd = [&quot;C:&quot;,&quot;cd C:\\Temp_a\\&quot; + dir + &quot;\\C_Element\\SE_RFM\\SS_REL3\\RnD&quot;,&quot;dir&quot;] # execute command, and return the output def runCmd(cmd): global r r = os.popen(cmd) text = r.read() return text def closeCmd(): r.close() # for i in range(len(cmd)): # result = runCmd(cmd[i]) # print (&quot;--&gt;Cmd send: %s&quot; % cmd[i]) # print (&quot;&lt;--Cmd back: %s&quot; % result) # closeCmd() cc = cmd[0] for i in range(1,len(cmd)): cc = cc + &quot;&amp;&amp;&quot; + cmd[i] result = runCmd(cc) print (&quot;--&gt;Cmd send: %s&quot; % cc) print (&quot;&lt;--Cmd back: %s&quot; % result) #pattern = r&quot;^FRM-.*?LAR\n$&quot; pattern = r&quot;FRM-\w*&quot; res = re.findall(pattern,result) print res]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[DIY 远程控制电源模块]]></title>
      <url>%2F2016%2F12%2F15%2F2016-12-15-1%2F</url>
      <content type="text"><![CDATA[&emsp;&emsp;我们的自动化测试环境一直缺少一个可以远程控制的供电系统来控制Radio产品的开关机。之前在波兰的时候，我看到老外的自动化Lab全部采用的是商业控制产品，可使用web页面控制，也可以使用简单的协议控制（ssh或者Telnet发送简单的命令控制外部电路）。&emsp;&emsp;按照老外的配置，一套控制核心+几路ABB继电器+几路空开。我查了下报价，3000欧元一个控制中心，继电器也得300RMB一个。总体下来一万多RMB。就为了自动开个机，花销挺贵的。老板也没同意，搁置了这个想法一段时间。&emsp;&emsp;后来混树莓派论坛的时候，我发现有人在用ESP8266组装各种很屌的玩意，其中就包括可控电源开关，很有意思。我随后淘宝了几只，一只只要25块，很便宜的说。&emsp;&emsp;以下记录的就是实现可控电源开关的过程。 直接上demo图&emsp;&emsp;这个demo使用的材料有：ESP8266开发板1只+ LED灯2个 + 电阻一只 + 若干导线 + 5V继电器一枚 + 小米移动电源一个，除掉小米移动电源，花销大概是50块不到。 逻辑原理是这样的： 开发板有固定的3.3V和地，以及若干3.3V的GPIO引脚 控制信号由D1 GPIO控制，图上的黄线 经过LED的链路就是受控链路，LED可以换成任何我们想要控制上下电的设备。 受控制的链路实际上有三个端口，一个固定端口，一个常开端口，一个常闭端口。我因为需要的场景是只在需要的时候关机，所以连接了常开端口。 继电器的PIN角可以设置为用低电平触发电源断开，或者用高电平触发电源断开。经过我的尝试 如果设置为高电平触发，当D1 GPIO端口从关变为开的时候，会从0V变为+3.3V，不足5V，无法作为“高电平”来触发继电器吸合（因为我买的这个继电器是5V驱动的）。 如果设置为低电平触发，平时D1 保持常开，需要下电的时候，把D1关闭，从+3.3V变为0V，刚好是继电器认可的“低电平”。此时会触发继电器吸合。受控链路断开。电源关闭。目的达成。（PS：后面的代码是写的电源常闭） &emsp;&emsp;这里比较凑巧的是3.3V可以给继电器供电。所以就不需要再麻烦给继电器连接额外的电源，从而可以把整个装置做的很小。同时，毕竟它是一个IOT开发板，是带WIFI芯片的，可以连接路由器。参考了dingzz的 http://blog.csdn.NET/dingzz/article/details/46876503 文章加入了一个网页特性，这里init.lua的代码如下(Lua脚本)： print(&apos;Setting up WIFI...&apos;) wifi.setmode(wifi.STATION) wifi.sta.config(&apos;WIFI_ssid&apos;, &apos;wifi_password&apos;) wifi.sta.connect() tmr.alarm(1,1000,1,function() if wifi.sta.getip()==nil then print(&quot;IP unavaiable,Waiting...&quot;) else tmr.stop(1) print(&quot;Config done, IP is &quot;..wifi.sta.getip()) end end) led1 = 1 led2 = 2 gpio.mode(led1, gpio.OUTPUT) gpio.mode(led2, gpio.OUTPUT) srv=net.createServer(net.TCP) srv:listen(80,function(conn) conn:on(&quot;receive&quot;, function(client,request) local buf = &quot;&quot;; local _, _, method, path, vars = string.find(request, &quot;([A-Z]+) (.+)?(.+) HTTP&quot;); if(method == nil)then _, _, method, path = string.find(request, &quot;([A-Z]+) (.+) HTTP&quot;); end local _GET = {} if (vars ~= nil)then for k, v in string.gmatch(vars, &quot;(%w+)=(%w+)&amp;*&quot;) do _GET[k] = v end end buf = buf..&quot;&lt;h1&gt; ESP 8266 server&lt;/h1&gt;&quot;; buf = buf..&quot;&lt;p&gt;switch1 &lt;a href=\&quot;?pin=ON1\&quot;&gt;&lt;button&gt;ON&lt;/button&gt;&lt;/a&gt; &lt;a href=\&quot;?pin=OFF1\&quot;&gt;&lt;button&gt;OFF&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;&quot;; buf = buf..&quot;&lt;p&gt;switch2 &lt;a href=\&quot;?pin=ON2\&quot;&gt;&lt;button&gt;ON&lt;/button&gt;&lt;/a&gt; &lt;a href=\&quot;?pin=OFF2\&quot;&gt;&lt;button&gt;OFF&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;&quot;; local _on,_off = &quot;&quot;,&quot;&quot; if(_GET.pin == &quot;ON1&quot;)then gpio.write(led1, gpio.HIGH); elseif(_GET.pin == &quot;OFF1&quot;)then gpio.write(led1, gpio.LOW); elseif(_GET.pin == &quot;ON2&quot;)then gpio.write(led2, gpio.HIGH); elseif(_GET.pin == &quot;OFF2&quot;)then gpio.write(led2, gpio.LOW); end client:send(buf); client:close(); collectgarbage(); end) end) init.lua传入开发板后，每次开机都会执行它，这是NodeMcu的设计。这里代码实现的功能就是连接WIFI，并建立了一个网页server.只要知道开发板的IP地址，就可以通过浏览器控制你想控制的电源。效果是这样的： 实验过程1. init.lua 传到ESP8266里。开机，它即可连接上指定的WIFI信号，假如PC同时连入同一个无线网，就可以简单的通过网页访问ESP8266 server。然后用浏览器打开IP地址（实际上，我之前调试的时候通过串口打印已经知道了这个IP，但是如果是首次换了脚本，直接通过外部电源开机，是不知道它的IP地址的。 2. 测试开始：插入小米电源，继电器供上了电，亮灯。从串口可以看到，大概经过10秒，ESP8266自动连上WIFI，获得IP地址，在浏览器敲入这个IP地址可以进入WEB界面。点击GPIO 0 ON，此时D1的高电平打开，但是LED并没有变化。点击GPIO 2 OFF，此时D2变为低电平，然后应该是这个下降沿触发了继电器的输出端吸合，两端连接，形成回路。LED亮起。点击GPIO 2 ON， D2变为高电平，继电器两端悬空，断开。LED灯熄灭。 实验结束&emsp;&emsp;如果和欧洲那个商用电源开关相比，不说安全和稳定性，咱这个功能也差不多了…嘿嘿，而且很便宜。&emsp;&emsp;我使用的这个继电器是松乐的5V模块，我找了我们这的电源designer给我评估下这个小装置的安全性.他认为继电器本身弱电和强电是分离的，是相对成熟的技术。所以没有什么风险。&emsp;&emsp;这样我可以经由WIFI控制直流27V 和交流220V的设备无压力。只要不是频繁开关（也不建议这样做），都是OK的。后来我又加装了一个20A空气开关，防止短路情况发生。算是加了一道防护。&emsp;&emsp;目前这个装置总是通过IP地址来控制，不太智能，我考虑后续再改进改进，比如加入一个字符串作为标志，然后通过ARP或者什么别的方式找标志，来实现“不知道IP地址”也可以建立通信的办法。埋下待续。 PS: 附上ESP 8266 原理图]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[远程控制FSV读取EVM值]]></title>
      <url>%2F2016%2F12%2F15%2F2016-12-15%2F</url>
      <content type="text"><![CDATA[&emsp;&emsp;经常要手动控制FSV测试RRH的上下行射频性能指标。重复操作太枯燥，还好查找手册发现了可以通过RJ45或者GPIB端口发送SCPI命令实现远程控制，总结命令如下 测试 TX EVM command 解释 “*RST” 复位 “INIT:CONT OFF” 初始化频谱仪模式 “SYST:DISP:UPD ON” 屏幕给出显示 “INST LTE” 初始化LTE选件 “FREQ:CENT 2140 MHz” 设置测试的中心频率为2140Mhz “CONF:DL:BW BW5_00” 设置监测5M带宽 “POW:AUTO2 ON” 打开自动调节增益 “DISP:TRAC:Y:RLEV:OFFS 42” 设置外部线损为42dbm CALC2:FEED ‘STAT:ASUM’ 进入TX总结页面 INIT:CONT OFF 设置为单次测试模式 INIT;*WAI 进行一次测试 FETC:SUMM:EVM? 读取刚刚测试的EVM平均值 FETC:SUMM:EVM:ALL:MAX? 读取EVM最大值 FETC:SUMM:EVM:ALL:MIN? 读取EVM最小值 测试 TX ACLR command 解释 “*RST” 复位 “INIT:CONT OFF” 初始化频谱仪模式 “SYST:DISP:UPD ON” 屏幕给出显示 “INST LTE” 初始化LTE选件 “FREQ:CENT “+s_Freq+”MHz” 设置中心频率 “CONF:DL:BW BW”+s_BW 设置带宽 “POW:AUTO2 ON” 打开自动控制增益 “DISP:TRAC:Y:RLEV:OFFS “+s_CableLoss 设置外部线损 “CALC2:FEED ‘SPEC:ACP’” 进入ACLR界面 “INIT:CONT OFF” 进入单次测试模式 “INIT;*WAI” 执行一次测试 “CALC1:MARK:FUNC:POW:RES?” 取得刚刚的测试结果 ###测试RX EVM主要是设置信号发生器，发出制定的波形文件 command 解释 “*RST” 复位 “ROSC:SOUR EXT” 使用外部时钟源 “ROSC:EXT:FREQ 10MHz” 设置外部时钟源的频率是10Mhz “ROSC:EXT:SBAN NARR” 设置外部时钟源的同步要求为狭窄 “BB:ARB:WAV:SEL ‘“+s_wavePath+”\“+”LTE_UL_4GMaxPN18“+sBandWidth+”“+s_Modulation+”‘“ 设置本地波形文件路径 “FREQ “+s_Freq+”Mhz” + “BB:ARB:TRIG:SEQ AUTO” 设置发出的波形的频率 “BB:ARB:STAT ON” 加载刚刚选择的波形 “POW:OFFS “+s_OffSet 加入外部线损的计算 “:POW “+s_RfOutLev + “OUTP ON” 打开外部输出 写了个Python脚本，主要依靠telnet来发送上述命令实现控制和读取结果，代码放在https://github.com/yunpengb/rohde_schwarz_remote_control]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[每日文件分类文件夹]]></title>
      <url>%2F2016%2F12%2F12%2F2016-12-12-1%2F</url>
      <content type="text"><![CDATA[&emsp;&emsp;经常工作的时候，每天处理大量的文件很容易混乱和丢失。&emsp;&emsp;我有个想法，每天的工作用到的文件都独立的放到一个文件夹里。这样整齐一些也方便管理。&emsp;&emsp;于是我用python写了一个小脚本。在安装了解释器的PC里只需要双击即可执行，即可生成以当天日期为名字的文件夹。 # yunpeng daily work use import os import time def makeDIRwithDate(): timestat = timestamp = time.strftime(&apos;%Y-%m-%d&apos;,time.localtime(time.time())) existdir = os.path.exists(timestat) if not existdir: os.mkdir(timestat) print &quot;make dir:[%s]&quot; % timestat else: print &apos;folder[%s] already exists&apos; % timestat makeDIRwithDate() &emsp;&emsp;创建了文件夹后，剩下就是手工把每天用到的文件复制进去保存。效果如下图。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2016%2F12%2F11%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
