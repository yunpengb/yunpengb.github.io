[{"title":"python 实现在cmd里执行命令","url":"http://yoursite.com/2016/12/16/2016-12-16/","content":"<p>我在写脚本实现一些手动的工作自动化的过程中，有一个需求是<br>在win的cmd里输入命令，参考一些信息实现如下：</p>\n<pre><code>import os\nimport re\n\ndir = &quot;FRM35.09.R01&quot;\ncmd = [&quot;C:&quot;,&quot;cd C:\\\\Temp_a\\\\&quot; + dir + &quot;\\\\C_Element\\\\SE_RFM\\\\SS_REL3\\\\RnD&quot;,&quot;dir&quot;]\n\n# execute command, and return the output\ndef runCmd(cmd):\n    global r\n    r = os.popen(cmd)\n    text = r.read()\n    return text\n\ndef closeCmd():\n    r.close()\n\n# for i in range(len(cmd)):\n    # result = runCmd(cmd[i])\n    # print (&quot;--&gt;Cmd send: %s&quot; % cmd[i])\n    # print (&quot;&lt;--Cmd back: %s&quot; % result)\n# closeCmd()\n\ncc = cmd[0]\nfor i in range(1,len(cmd)):\n    cc = cc + &quot;&amp;&amp;&quot; + cmd[i]\nresult = runCmd(cc)\n\n\nprint (&quot;--&gt;Cmd send: %s&quot; % cc)\nprint (&quot;&lt;--Cmd back: %s&quot; % result)\n\n#pattern = r&quot;^FRM-.*?LAR\\n$&quot;\npattern = r&quot;FRM-\\w*&quot;\nres = re.findall(pattern,result)\nprint res\n</code></pre>","categories":[],"tags":[]},{"title":"DIY 远程控制电源模块","url":"http://yoursite.com/2016/12/15/2016-12-15-1/","content":"<p>&emsp;&emsp;我们的自动化测试环境一直缺少一个可以远程控制的供电系统来控制Radio产品的开关机。之前在波兰的时候，我看到老外的自动化Lab全部采用的是商业控制产品，可使用web页面控制，也可以使用简单的协议控制（ssh或者Telnet发送简单的命令控制外部电路）。<br>&emsp;&emsp;按照老外的配置，一套控制核心+几路ABB继电器+几路空开。我查了下报价，3000欧元一个控制中心，继电器也得300RMB一个。总体下来一万多RMB。就为了自动开个机，花销挺贵的。老板也没同意，搁置了这个想法一段时间。<br>&emsp;&emsp;后来混树莓派论坛的时候，我发现有人在用ESP8266组装各种很屌的玩意，其中就包括可控电源开关，很有意思。我随后淘宝了几只，一只只要25块，很便宜的说。<br>&emsp;&emsp;以下记录的就是实现可控电源开关的过程。</p>\n<h4 id=\"直接上demo图\"><a href=\"#直接上demo图\" class=\"headerlink\" title=\"直接上demo图\"></a>直接上demo图</h4><p><img src=\"http://oi16bpd89.bkt.clouddn.com/setup_remote_power.jpg\" alt=\"\"><br>&emsp;&emsp;这个demo使用的材料有：ESP8266开发板1只+ LED灯2个 + 电阻一只 + 若干导线 + 5V继电器一枚 + 小米移动电源一个，除掉小米移动电源，花销大概是50块不到。</p>\n<h4 id=\"逻辑原理是这样的：\"><a href=\"#逻辑原理是这样的：\" class=\"headerlink\" title=\"逻辑原理是这样的：\"></a>逻辑原理是这样的：</h4><p><img src=\"http://oi16bpd89.bkt.clouddn.com/logi1.png\" alt=\"\"></p>\n<ul>\n<li>开发板有固定的3.3V和地，以及若干3.3V的GPIO引脚</li>\n<li>控制信号由D1 GPIO控制，图上的黄线</li>\n<li>经过LED的链路就是受控链路，LED可以换成任何我们想要控制上下电的设备。</li>\n<li>受控制的链路实际上有三个端口，一个固定端口，一个常开端口，一个常闭端口。我因为需要的场景是只在需要的时候关机，所以连接了常开端口。</li>\n<li>继电器的PIN角可以设置为用低电平触发电源断开，或者用高电平触发电源断开。<h4 id=\"经过我的尝试\"><a href=\"#经过我的尝试\" class=\"headerlink\" title=\"经过我的尝试\"></a>经过我的尝试</h4></li>\n<li>如果设置为高电平触发，当D1 GPIO端口从关变为开的时候，会从0V变为+3.3V，不足5V，无法作为“高电平”来触发继电器吸合（因为我买的这个继电器是5V驱动的）。</li>\n<li>如果设置为低电平触发，平时D1 保持常开，需要下电的时候，把D1关闭，从+3.3V变为0V，刚好是继电器认可的“低电平”。此时会触发继电器吸合。受控链路断开。电源关闭。目的达成。（PS：后面的代码是写的电源常闭）</li>\n</ul>\n<p>&emsp;&emsp;这里比较凑巧的是3.3V可以给继电器供电。所以就不需要再麻烦给继电器连接额外的电源，从而可以把整个装置做的很小。<br>同时，毕竟它是一个IOT开发板，是带WIFI芯片的，可以连接路由器。<br>参考了dingzz的 <a href=\"http://blog.csdn.NET/dingzz/article/details/46876503\" target=\"_blank\" rel=\"external\">http://blog.csdn.NET/dingzz/article/details/46876503</a> 文章<br>加入了一个网页特性，这里init.lua的代码如下(Lua脚本)：</p>\n<!-- lang:Lua -->\n<pre><code>print(&apos;Setting up WIFI...&apos;)\nwifi.setmode(wifi.STATION)\nwifi.sta.config(&apos;WIFI_ssid&apos;, &apos;wifi_password&apos;)\nwifi.sta.connect()\ntmr.alarm(1,1000,1,function()\nif wifi.sta.getip()==nil then\nprint(&quot;IP unavaiable,Waiting...&quot;)\nelse\ntmr.stop(1)\nprint(&quot;Config done, IP is &quot;..wifi.sta.getip())\nend\nend)\nled1 = 1\nled2 = 2\ngpio.mode(led1, gpio.OUTPUT)\ngpio.mode(led2, gpio.OUTPUT)\nsrv=net.createServer(net.TCP)\nsrv:listen(80,function(conn)\n    conn:on(&quot;receive&quot;, function(client,request)\n        local buf = &quot;&quot;;\n        local _, _, method, path, vars = string.find(request, &quot;([A-Z]+) (.+)?(.+) HTTP&quot;);\n        if(method == nil)then\n            _, _, method, path = string.find(request, &quot;([A-Z]+) (.+) HTTP&quot;);\n        end\n        local _GET = {}\n        if (vars ~= nil)then\n            for k, v in string.gmatch(vars, &quot;(%w+)=(%w+)&amp;*&quot;) do\n                _GET[k] = v\n            end\n        end\n        buf = buf..&quot;&lt;h1&gt; ESP 8266 server&lt;/h1&gt;&quot;;\n        buf = buf..&quot;&lt;p&gt;switch1 &lt;a href=\\&quot;?pin=ON1\\&quot;&gt;&lt;button&gt;ON&lt;/button&gt;&lt;/a&gt; &lt;a href=\\&quot;?pin=OFF1\\&quot;&gt;&lt;button&gt;OFF&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;&quot;;\n        buf = buf..&quot;&lt;p&gt;switch2 &lt;a href=\\&quot;?pin=ON2\\&quot;&gt;&lt;button&gt;ON&lt;/button&gt;&lt;/a&gt; &lt;a href=\\&quot;?pin=OFF2\\&quot;&gt;&lt;button&gt;OFF&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;&quot;;\n        local _on,_off = &quot;&quot;,&quot;&quot;\n        if(_GET.pin == &quot;ON1&quot;)then\n              gpio.write(led1, gpio.HIGH);\n        elseif(_GET.pin == &quot;OFF1&quot;)then\n              gpio.write(led1, gpio.LOW);\n        elseif(_GET.pin == &quot;ON2&quot;)then\n              gpio.write(led2, gpio.HIGH);\n        elseif(_GET.pin == &quot;OFF2&quot;)then\n              gpio.write(led2, gpio.LOW);\n        end\n        client:send(buf);\n        client:close();\n        collectgarbage();\n    end)\nend)\n</code></pre><p>init.lua传入开发板后，每次开机都会执行它，<br>这是NodeMcu的设计。<br>这里代码实现的功能就是连接WIFI，并建立了一个网页server.<br>只要知道开发板的IP地址，就可以通过浏览器控制你想控制的电源。<br>效果是这样的：<br><img src=\"http://oi16bpd89.bkt.clouddn.com/remote_web.png\" alt=\"\"></p>\n<h4 id=\"实验过程\"><a href=\"#实验过程\" class=\"headerlink\" title=\"实验过程\"></a>实验过程</h4><h5 id=\"1-init-lua-传到ESP8266里。\"><a href=\"#1-init-lua-传到ESP8266里。\" class=\"headerlink\" title=\"1.  init.lua 传到ESP8266里。\"></a>1.  init.lua 传到ESP8266里。</h5><p>开机，它即可连接上指定的WIFI信号，假如PC同时连入同一个无线网，就可以简单的通过网页访问ESP8266 server。<br>然后用浏览器打开IP地址（实际上，我之前调试的时候通过串口打印已经知道了这个IP，但是如果是首次换了脚本，直接通过外部电源开机，是不知道它的IP地址的。</p>\n<h5 id=\"2-测试开始：\"><a href=\"#2-测试开始：\" class=\"headerlink\" title=\"2. 测试开始：\"></a>2. 测试开始：</h5><p>插入小米电源，继电器供上了电，亮灯。<br>从串口可以看到，大概经过10秒，ESP8266自动连上WIFI，获得IP地址，在浏览器敲入这个IP地址可以进入WEB界面。<br>点击GPIO 0 ON，此时D1的高电平打开，但是LED并没有变化。<br>点击GPIO 2 OFF，此时D2变为低电平，然后应该是这个下降沿触发了继电器的输出端吸合，两端连接，形成回路。LED亮起。<br>点击GPIO 2 ON， D2变为高电平，继电器两端悬空，断开。LED灯熄灭。</p>\n<h5 id=\"实验结束\"><a href=\"#实验结束\" class=\"headerlink\" title=\"实验结束\"></a>实验结束</h5><p>&emsp;&emsp;如果和欧洲那个商用电源开关相比，不说安全和稳定性，咱这个功能也差不多了…嘿嘿，而且很便宜。<br>&emsp;&emsp;我使用的这个继电器是松乐的5V模块，我找了我们这的电源designer给我评估下这个小装置的安全性.他认为<br>继电器本身弱电和强电是分离的，是相对成熟的技术。所以没有什么风险。<br>&emsp;&emsp;这样我可以经由WIFI控制直流27V 和交流220V的设备无压力。只要不是频繁开关（也不建议这样做），都是OK的。后来我又加装了一个20A空气开关，防止短路情况发生。算是加了一道防护。<br>&emsp;&emsp;目前这个装置总是通过IP地址来控制，不太智能，我考虑后续再改进改进，比如加入一个字符串作为标志，然后通过ARP或者什么别的方式找标志，来实现“不知道IP地址”也可以建立通信的办法。<br>埋下待续。</p>\n<p>PS: 附上ESP 8266 原理图</p>\n<p><img src=\"http://oi16bpd89.bkt.clouddn.com/pinpin.png\" alt=\"\"></p>\n","categories":[],"tags":[]},{"title":"远程控制FSV读取EVM值","url":"http://yoursite.com/2016/12/15/2016-12-15/","content":"<p>&emsp;&emsp;经常要手动控制FSV测试RRH的上下行射频性能指标。重复操作太枯燥，还好查找手册发现了可以通过RJ45或者GPIB端口发送SCPI命令实现远程控制，<br>总结命令如下</p>\n<h3 id=\"测试-TX-EVM\"><a href=\"#测试-TX-EVM\" class=\"headerlink\" title=\"测试 TX EVM\"></a>测试 TX EVM</h3><table>\n<thead>\n<tr>\n<th><strong>command</strong></th>\n<th style=\"text-align:center\"><strong>解释</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“*RST”</td>\n<td style=\"text-align:center\">复位</td>\n</tr>\n<tr>\n<td>“INIT:CONT OFF”</td>\n<td style=\"text-align:center\">初始化频谱仪模式</td>\n</tr>\n<tr>\n<td>“SYST:DISP:UPD ON”</td>\n<td style=\"text-align:center\">屏幕给出显示</td>\n</tr>\n<tr>\n<td>“INST LTE”</td>\n<td style=\"text-align:center\">初始化LTE选件</td>\n</tr>\n<tr>\n<td>“FREQ:CENT 2140 MHz”</td>\n<td style=\"text-align:center\">设置测试的中心频率为2140Mhz</td>\n</tr>\n<tr>\n<td>“CONF:DL:BW BW5_00”</td>\n<td style=\"text-align:center\">设置监测5M带宽</td>\n</tr>\n<tr>\n<td>“POW:AUTO2 ON”</td>\n<td style=\"text-align:center\">打开自动调节增益</td>\n</tr>\n<tr>\n<td>“DISP:TRAC:Y:RLEV:OFFS 42”</td>\n<td style=\"text-align:center\">设置外部线损为42dbm</td>\n</tr>\n<tr>\n<td>CALC2:FEED ‘STAT:ASUM’</td>\n<td style=\"text-align:center\">进入TX总结页面</td>\n</tr>\n<tr>\n<td>INIT:CONT OFF</td>\n<td style=\"text-align:center\">设置为单次测试模式</td>\n</tr>\n<tr>\n<td>INIT;*WAI</td>\n<td style=\"text-align:center\">进行一次测试</td>\n</tr>\n<tr>\n<td>FETC:SUMM:EVM?</td>\n<td style=\"text-align:center\">读取刚刚测试的EVM平均值</td>\n</tr>\n<tr>\n<td>FETC:SUMM:EVM:ALL:MAX?</td>\n<td style=\"text-align:center\">读取EVM最大值</td>\n</tr>\n<tr>\n<td>FETC:SUMM:EVM:ALL:MIN?</td>\n<td style=\"text-align:center\">读取EVM最小值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"测试-TX-ACLR\"><a href=\"#测试-TX-ACLR\" class=\"headerlink\" title=\"测试 TX ACLR\"></a>测试 TX ACLR</h3><table>\n<thead>\n<tr>\n<th><strong>command</strong></th>\n<th style=\"text-align:center\"><strong>解释</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“*RST”</td>\n<td style=\"text-align:center\">复位</td>\n</tr>\n<tr>\n<td>“INIT:CONT OFF”</td>\n<td style=\"text-align:center\">初始化频谱仪模式</td>\n</tr>\n<tr>\n<td>“SYST:DISP:UPD ON”</td>\n<td style=\"text-align:center\">屏幕给出显示</td>\n</tr>\n<tr>\n<td>“INST LTE”</td>\n<td style=\"text-align:center\">初始化LTE选件</td>\n</tr>\n<tr>\n<td>“FREQ:CENT “+s_Freq+”MHz”</td>\n<td style=\"text-align:center\">设置中心频率</td>\n</tr>\n<tr>\n<td>“CONF:DL:BW BW”+s_BW</td>\n<td style=\"text-align:center\">设置带宽</td>\n</tr>\n<tr>\n<td>“POW:AUTO2 ON”</td>\n<td style=\"text-align:center\">打开自动控制增益</td>\n</tr>\n<tr>\n<td>“DISP:TRAC:Y:RLEV:OFFS “+s_CableLoss</td>\n<td style=\"text-align:center\">设置外部线损</td>\n</tr>\n<tr>\n<td>“CALC2:FEED ‘SPEC:ACP’”</td>\n<td style=\"text-align:center\">进入ACLR界面</td>\n</tr>\n<tr>\n<td>“INIT:CONT OFF”</td>\n<td style=\"text-align:center\">进入单次测试模式</td>\n</tr>\n<tr>\n<td>“INIT;*WAI”</td>\n<td style=\"text-align:center\">执行一次测试</td>\n</tr>\n<tr>\n<td>“CALC1:MARK:FUNC:POW:RES?”</td>\n<td style=\"text-align:center\">取得刚刚的测试结果</td>\n</tr>\n</tbody>\n</table>\n<p>###测试RX EVM<br>主要是设置信号发生器，发出制定的波形文件</p>\n<table>\n<thead>\n<tr>\n<th><strong>command</strong></th>\n<th style=\"text-align:center\"><strong>解释</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“*RST”</td>\n<td style=\"text-align:center\">复位</td>\n</tr>\n<tr>\n<td>“ROSC:SOUR EXT”</td>\n<td style=\"text-align:center\">使用外部时钟源</td>\n</tr>\n<tr>\n<td>“ROSC:EXT:FREQ 10MHz”</td>\n<td style=\"text-align:center\">设置外部时钟源的频率是10Mhz</td>\n</tr>\n<tr>\n<td>“ROSC:EXT:SBAN NARR”</td>\n<td style=\"text-align:center\">设置外部时钟源的同步要求为狭窄</td>\n</tr>\n<tr>\n<td>“BB:ARB:WAV:SEL ‘“+s_wavePath+”\\“+”LTE_UL_4GMax<em>PN18</em>“+s<em>BandWidth+”</em>“+s_Modulation+”‘“</td>\n<td style=\"text-align:center\">设置本地波形文件路径</td>\n</tr>\n<tr>\n<td>“FREQ “+s_Freq+”Mhz” + “BB:ARB:TRIG:SEQ AUTO”</td>\n<td style=\"text-align:center\">设置发出的波形的频率</td>\n</tr>\n<tr>\n<td>“BB:ARB:STAT ON”</td>\n<td style=\"text-align:center\">加载刚刚选择的波形</td>\n</tr>\n<tr>\n<td>“POW:OFFS “+s_OffSet</td>\n<td style=\"text-align:center\">加入外部线损的计算</td>\n</tr>\n<tr>\n<td>“:POW “+s_RfOutLev + “OUTP ON”</td>\n<td style=\"text-align:center\">打开外部输出</td>\n</tr>\n</tbody>\n</table>\n<p>写了个Python脚本，主要依靠telnet来发送上述命令实现控制和读取结果，代码放在<br><a href=\"https://github.com/yunpengb/rohde_schwarz_remote_control\" target=\"_blank\" rel=\"external\">https://github.com/yunpengb/rohde_schwarz_remote_control</a></p>\n","categories":[],"tags":[]},{"title":"每日文件分类文件夹","url":"http://yoursite.com/2016/12/12/2016-12-12-1/","content":"<p>&emsp;&emsp;经常工作的时候，每天处理大量的文件很容易混乱和丢失。<br>&emsp;&emsp;我有个想法，每天的工作用到的文件都独立的放到一个文件夹里。这样整齐一些也方便管理。<br>&emsp;&emsp;于是我用python写了一个小脚本。在安装了解释器的PC里只需要双击即可执行，即可生成以当天日期为名字的文件夹。</p>\n<!-- lang:python -->\n<pre><code># yunpeng daily work use\nimport os\nimport time\n\ndef makeDIRwithDate():    \n    timestat = timestamp = time.strftime(&apos;%Y-%m-%d&apos;,time.localtime(time.time())) \n    existdir = os.path.exists(timestat)\n    if not existdir:\n        os.mkdir(timestat)\n        print &quot;make dir:[%s]&quot; % timestat\n    else:\n        print &apos;folder[%s] already exists&apos; % timestat\nmakeDIRwithDate()\n</code></pre><p>&emsp;&emsp;创建了文件夹后，剩下就是手工把每天用到的文件复制进去保存。效果如下图。</p>\n<p><img src=\"http://oi16bpd89.bkt.clouddn.com/dir.png\" alt=\"\"></p>\n","categories":[],"tags":[]},{"title":"Hello World","url":"http://yoursite.com/2016/12/11/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]}]